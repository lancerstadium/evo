#ifndef TFLITE_VERIFIER_H
#define TFLITE_VERIFIER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef TFLITE_READER_H
#include "tflite_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#include "flatcc/flatcc_prologue.h"

static int tflite_AssociatedFile_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_FeatureProperties_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ImageSize_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ImageProperties_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_AudioProperties_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_BoundingBoxProperties_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ValueRange_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_Content_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_NormalizationOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ScoreCalibrationOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ScoreThresholdingOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_BertTokenizerOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SentencePieceTokenizerOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_RegexTokenizerOptions_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ProcessUnit_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_Stats_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_TensorGroup_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_TensorMetadata_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_CustomMetadata_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_SubGraphMetadata_verify_table(flatcc_table_verifier_descriptor_t *td);
static int tflite_ModelMetadata_verify_table(flatcc_table_verifier_descriptor_t *td);

static int tflite_ContentProperties_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, tflite_FeatureProperties_verify_table); /* FeatureProperties */
    case 2: return flatcc_verify_union_table(ud, tflite_ImageProperties_verify_table); /* ImageProperties */
    case 3: return flatcc_verify_union_table(ud, tflite_BoundingBoxProperties_verify_table); /* BoundingBoxProperties */
    case 4: return flatcc_verify_union_table(ud, tflite_AudioProperties_verify_table); /* AudioProperties */
    default: return flatcc_verify_ok;
    }
}

static int tflite_ProcessUnitOptions_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, tflite_NormalizationOptions_verify_table); /* NormalizationOptions */
    case 2: return flatcc_verify_union_table(ud, tflite_ScoreCalibrationOptions_verify_table); /* ScoreCalibrationOptions */
    case 3: return flatcc_verify_union_table(ud, tflite_ScoreThresholdingOptions_verify_table); /* ScoreThresholdingOptions */
    case 4: return flatcc_verify_union_table(ud, tflite_BertTokenizerOptions_verify_table); /* BertTokenizerOptions */
    case 5: return flatcc_verify_union_table(ud, tflite_SentencePieceTokenizerOptions_verify_table); /* SentencePieceTokenizerOptions */
    case 6: return flatcc_verify_union_table(ud, tflite_RegexTokenizerOptions_verify_table); /* RegexTokenizerOptions */
    default: return flatcc_verify_ok;
    }
}

static int tflite_AssociatedFile_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* description */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 1, 1) /* type */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 3, 0) /* locale */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 4, 0) /* version */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_AssociatedFile_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_AssociatedFile_identifier, &tflite_AssociatedFile_verify_table);
}

static inline int tflite_AssociatedFile_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_AssociatedFile_identifier, &tflite_AssociatedFile_verify_table);
}

static inline int tflite_AssociatedFile_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_AssociatedFile_type_identifier, &tflite_AssociatedFile_verify_table);
}

static inline int tflite_AssociatedFile_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_AssociatedFile_type_identifier, &tflite_AssociatedFile_verify_table);
}

static inline int tflite_AssociatedFile_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_AssociatedFile_verify_table);
}

static inline int tflite_AssociatedFile_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_AssociatedFile_verify_table);
}

static inline int tflite_AssociatedFile_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_AssociatedFile_verify_table);
}

static inline int tflite_AssociatedFile_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_AssociatedFile_verify_table);
}

static int tflite_FeatureProperties_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    return flatcc_verify_ok;
}

static inline int tflite_FeatureProperties_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_FeatureProperties_identifier, &tflite_FeatureProperties_verify_table);
}

static inline int tflite_FeatureProperties_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_FeatureProperties_identifier, &tflite_FeatureProperties_verify_table);
}

static inline int tflite_FeatureProperties_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_FeatureProperties_type_identifier, &tflite_FeatureProperties_verify_table);
}

static inline int tflite_FeatureProperties_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_FeatureProperties_type_identifier, &tflite_FeatureProperties_verify_table);
}

static inline int tflite_FeatureProperties_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_FeatureProperties_verify_table);
}

static inline int tflite_FeatureProperties_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_FeatureProperties_verify_table);
}

static inline int tflite_FeatureProperties_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_FeatureProperties_verify_table);
}

static inline int tflite_FeatureProperties_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_FeatureProperties_verify_table);
}

static int tflite_ImageSize_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* width */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* height */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ImageSize_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ImageSize_identifier, &tflite_ImageSize_verify_table);
}

static inline int tflite_ImageSize_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_ImageSize_identifier, &tflite_ImageSize_verify_table);
}

static inline int tflite_ImageSize_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ImageSize_type_identifier, &tflite_ImageSize_verify_table);
}

static inline int tflite_ImageSize_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_ImageSize_type_identifier, &tflite_ImageSize_verify_table);
}

static inline int tflite_ImageSize_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ImageSize_verify_table);
}

static inline int tflite_ImageSize_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_ImageSize_verify_table);
}

static inline int tflite_ImageSize_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ImageSize_verify_table);
}

static inline int tflite_ImageSize_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_ImageSize_verify_table);
}

static int tflite_ImageProperties_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* color_space */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 1, 0, &tflite_ImageSize_verify_table) /* default_size */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ImageProperties_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ImageProperties_identifier, &tflite_ImageProperties_verify_table);
}

static inline int tflite_ImageProperties_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_ImageProperties_identifier, &tflite_ImageProperties_verify_table);
}

static inline int tflite_ImageProperties_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ImageProperties_type_identifier, &tflite_ImageProperties_verify_table);
}

static inline int tflite_ImageProperties_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_ImageProperties_type_identifier, &tflite_ImageProperties_verify_table);
}

static inline int tflite_ImageProperties_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ImageProperties_verify_table);
}

static inline int tflite_ImageProperties_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_ImageProperties_verify_table);
}

static inline int tflite_ImageProperties_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ImageProperties_verify_table);
}

static inline int tflite_ImageProperties_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_ImageProperties_verify_table);
}

static int tflite_AudioProperties_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* sample_rate */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* channels */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_AudioProperties_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_AudioProperties_identifier, &tflite_AudioProperties_verify_table);
}

static inline int tflite_AudioProperties_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_AudioProperties_identifier, &tflite_AudioProperties_verify_table);
}

static inline int tflite_AudioProperties_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_AudioProperties_type_identifier, &tflite_AudioProperties_verify_table);
}

static inline int tflite_AudioProperties_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_AudioProperties_type_identifier, &tflite_AudioProperties_verify_table);
}

static inline int tflite_AudioProperties_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_AudioProperties_verify_table);
}

static inline int tflite_AudioProperties_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_AudioProperties_verify_table);
}

static inline int tflite_AudioProperties_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_AudioProperties_verify_table);
}

static inline int tflite_AudioProperties_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_AudioProperties_verify_table);
}

static int tflite_BoundingBoxProperties_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 4, 4, INT64_C(1073741823)) /* index */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* type */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 1, 1) /* coordinate_type */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_BoundingBoxProperties_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_BoundingBoxProperties_identifier, &tflite_BoundingBoxProperties_verify_table);
}

static inline int tflite_BoundingBoxProperties_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_BoundingBoxProperties_identifier, &tflite_BoundingBoxProperties_verify_table);
}

static inline int tflite_BoundingBoxProperties_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_BoundingBoxProperties_type_identifier, &tflite_BoundingBoxProperties_verify_table);
}

static inline int tflite_BoundingBoxProperties_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_BoundingBoxProperties_type_identifier, &tflite_BoundingBoxProperties_verify_table);
}

static inline int tflite_BoundingBoxProperties_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_BoundingBoxProperties_verify_table);
}

static inline int tflite_BoundingBoxProperties_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_BoundingBoxProperties_verify_table);
}

static inline int tflite_BoundingBoxProperties_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_BoundingBoxProperties_verify_table);
}

static inline int tflite_BoundingBoxProperties_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_BoundingBoxProperties_verify_table);
}

static int tflite_ValueRange_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* min */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* max */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ValueRange_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ValueRange_identifier, &tflite_ValueRange_verify_table);
}

static inline int tflite_ValueRange_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_ValueRange_identifier, &tflite_ValueRange_verify_table);
}

static inline int tflite_ValueRange_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ValueRange_type_identifier, &tflite_ValueRange_verify_table);
}

static inline int tflite_ValueRange_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_ValueRange_type_identifier, &tflite_ValueRange_verify_table);
}

static inline int tflite_ValueRange_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ValueRange_verify_table);
}

static inline int tflite_ValueRange_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_ValueRange_verify_table);
}

static inline int tflite_ValueRange_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ValueRange_verify_table);
}

static inline int tflite_ValueRange_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_ValueRange_verify_table);
}

static int tflite_Content_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_union_field(td, 1, 0, &tflite_ContentProperties_union_verifier) /* content_properties */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 2, 0, &tflite_ValueRange_verify_table) /* range */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_Content_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Content_identifier, &tflite_Content_verify_table);
}

static inline int tflite_Content_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_Content_identifier, &tflite_Content_verify_table);
}

static inline int tflite_Content_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Content_type_identifier, &tflite_Content_verify_table);
}

static inline int tflite_Content_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_Content_type_identifier, &tflite_Content_verify_table);
}

static inline int tflite_Content_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_Content_verify_table);
}

static inline int tflite_Content_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_Content_verify_table);
}

static inline int tflite_Content_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_Content_verify_table);
}

static inline int tflite_Content_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_Content_verify_table);
}

static int tflite_NormalizationOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 4, 4, INT64_C(1073741823)) /* mean */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 1, 0, 4, 4, INT64_C(1073741823)) /* std */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_NormalizationOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_NormalizationOptions_identifier, &tflite_NormalizationOptions_verify_table);
}

static inline int tflite_NormalizationOptions_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_NormalizationOptions_identifier, &tflite_NormalizationOptions_verify_table);
}

static inline int tflite_NormalizationOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_NormalizationOptions_type_identifier, &tflite_NormalizationOptions_verify_table);
}

static inline int tflite_NormalizationOptions_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_NormalizationOptions_type_identifier, &tflite_NormalizationOptions_verify_table);
}

static inline int tflite_NormalizationOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_NormalizationOptions_verify_table);
}

static inline int tflite_NormalizationOptions_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_NormalizationOptions_verify_table);
}

static inline int tflite_NormalizationOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_NormalizationOptions_verify_table);
}

static inline int tflite_NormalizationOptions_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_NormalizationOptions_verify_table);
}

static int tflite_ScoreCalibrationOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 1, 1) /* score_transformation */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* default_score */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ScoreCalibrationOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ScoreCalibrationOptions_identifier, &tflite_ScoreCalibrationOptions_verify_table);
}

static inline int tflite_ScoreCalibrationOptions_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_ScoreCalibrationOptions_identifier, &tflite_ScoreCalibrationOptions_verify_table);
}

static inline int tflite_ScoreCalibrationOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ScoreCalibrationOptions_type_identifier, &tflite_ScoreCalibrationOptions_verify_table);
}

static inline int tflite_ScoreCalibrationOptions_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_ScoreCalibrationOptions_type_identifier, &tflite_ScoreCalibrationOptions_verify_table);
}

static inline int tflite_ScoreCalibrationOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ScoreCalibrationOptions_verify_table);
}

static inline int tflite_ScoreCalibrationOptions_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_ScoreCalibrationOptions_verify_table);
}

static inline int tflite_ScoreCalibrationOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ScoreCalibrationOptions_verify_table);
}

static inline int tflite_ScoreCalibrationOptions_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_ScoreCalibrationOptions_verify_table);
}

static int tflite_ScoreThresholdingOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* global_score_threshold */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ScoreThresholdingOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ScoreThresholdingOptions_identifier, &tflite_ScoreThresholdingOptions_verify_table);
}

static inline int tflite_ScoreThresholdingOptions_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_ScoreThresholdingOptions_identifier, &tflite_ScoreThresholdingOptions_verify_table);
}

static inline int tflite_ScoreThresholdingOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ScoreThresholdingOptions_type_identifier, &tflite_ScoreThresholdingOptions_verify_table);
}

static inline int tflite_ScoreThresholdingOptions_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_ScoreThresholdingOptions_type_identifier, &tflite_ScoreThresholdingOptions_verify_table);
}

static inline int tflite_ScoreThresholdingOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ScoreThresholdingOptions_verify_table);
}

static inline int tflite_ScoreThresholdingOptions_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_ScoreThresholdingOptions_verify_table);
}

static inline int tflite_ScoreThresholdingOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ScoreThresholdingOptions_verify_table);
}

static inline int tflite_ScoreThresholdingOptions_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_ScoreThresholdingOptions_verify_table);
}

static int tflite_BertTokenizerOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_vector_field(td, 0, 0, &tflite_AssociatedFile_verify_table) /* vocab_file */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_BertTokenizerOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_BertTokenizerOptions_identifier, &tflite_BertTokenizerOptions_verify_table);
}

static inline int tflite_BertTokenizerOptions_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_BertTokenizerOptions_identifier, &tflite_BertTokenizerOptions_verify_table);
}

static inline int tflite_BertTokenizerOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_BertTokenizerOptions_type_identifier, &tflite_BertTokenizerOptions_verify_table);
}

static inline int tflite_BertTokenizerOptions_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_BertTokenizerOptions_type_identifier, &tflite_BertTokenizerOptions_verify_table);
}

static inline int tflite_BertTokenizerOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_BertTokenizerOptions_verify_table);
}

static inline int tflite_BertTokenizerOptions_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_BertTokenizerOptions_verify_table);
}

static inline int tflite_BertTokenizerOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_BertTokenizerOptions_verify_table);
}

static inline int tflite_BertTokenizerOptions_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_BertTokenizerOptions_verify_table);
}

static int tflite_SentencePieceTokenizerOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_vector_field(td, 0, 0, &tflite_AssociatedFile_verify_table) /* sentencePiece_model */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &tflite_AssociatedFile_verify_table) /* vocab_file */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_SentencePieceTokenizerOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SentencePieceTokenizerOptions_identifier, &tflite_SentencePieceTokenizerOptions_verify_table);
}

static inline int tflite_SentencePieceTokenizerOptions_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_SentencePieceTokenizerOptions_identifier, &tflite_SentencePieceTokenizerOptions_verify_table);
}

static inline int tflite_SentencePieceTokenizerOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SentencePieceTokenizerOptions_type_identifier, &tflite_SentencePieceTokenizerOptions_verify_table);
}

static inline int tflite_SentencePieceTokenizerOptions_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_SentencePieceTokenizerOptions_type_identifier, &tflite_SentencePieceTokenizerOptions_verify_table);
}

static inline int tflite_SentencePieceTokenizerOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SentencePieceTokenizerOptions_verify_table);
}

static inline int tflite_SentencePieceTokenizerOptions_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_SentencePieceTokenizerOptions_verify_table);
}

static inline int tflite_SentencePieceTokenizerOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SentencePieceTokenizerOptions_verify_table);
}

static inline int tflite_SentencePieceTokenizerOptions_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_SentencePieceTokenizerOptions_verify_table);
}

static int tflite_RegexTokenizerOptions_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* delim_regex_pattern */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &tflite_AssociatedFile_verify_table) /* vocab_file */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_RegexTokenizerOptions_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_RegexTokenizerOptions_identifier, &tflite_RegexTokenizerOptions_verify_table);
}

static inline int tflite_RegexTokenizerOptions_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_RegexTokenizerOptions_identifier, &tflite_RegexTokenizerOptions_verify_table);
}

static inline int tflite_RegexTokenizerOptions_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_RegexTokenizerOptions_type_identifier, &tflite_RegexTokenizerOptions_verify_table);
}

static inline int tflite_RegexTokenizerOptions_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_RegexTokenizerOptions_type_identifier, &tflite_RegexTokenizerOptions_verify_table);
}

static inline int tflite_RegexTokenizerOptions_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_RegexTokenizerOptions_verify_table);
}

static inline int tflite_RegexTokenizerOptions_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_RegexTokenizerOptions_verify_table);
}

static inline int tflite_RegexTokenizerOptions_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_RegexTokenizerOptions_verify_table);
}

static inline int tflite_RegexTokenizerOptions_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_RegexTokenizerOptions_verify_table);
}

static int tflite_ProcessUnit_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_union_field(td, 1, 0, &tflite_ProcessUnitOptions_union_verifier) /* options */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ProcessUnit_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ProcessUnit_identifier, &tflite_ProcessUnit_verify_table);
}

static inline int tflite_ProcessUnit_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_ProcessUnit_identifier, &tflite_ProcessUnit_verify_table);
}

static inline int tflite_ProcessUnit_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ProcessUnit_type_identifier, &tflite_ProcessUnit_verify_table);
}

static inline int tflite_ProcessUnit_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_ProcessUnit_type_identifier, &tflite_ProcessUnit_verify_table);
}

static inline int tflite_ProcessUnit_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ProcessUnit_verify_table);
}

static inline int tflite_ProcessUnit_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_ProcessUnit_verify_table);
}

static inline int tflite_ProcessUnit_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ProcessUnit_verify_table);
}

static inline int tflite_ProcessUnit_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_ProcessUnit_verify_table);
}

static int tflite_Stats_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 4, 4, INT64_C(1073741823)) /* max */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 1, 0, 4, 4, INT64_C(1073741823)) /* min */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_Stats_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Stats_identifier, &tflite_Stats_verify_table);
}

static inline int tflite_Stats_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_Stats_identifier, &tflite_Stats_verify_table);
}

static inline int tflite_Stats_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_Stats_type_identifier, &tflite_Stats_verify_table);
}

static inline int tflite_Stats_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_Stats_type_identifier, &tflite_Stats_verify_table);
}

static inline int tflite_Stats_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_Stats_verify_table);
}

static inline int tflite_Stats_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_Stats_verify_table);
}

static inline int tflite_Stats_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_Stats_verify_table);
}

static inline int tflite_Stats_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_Stats_verify_table);
}

static int tflite_TensorGroup_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_string_vector_field(td, 1, 0) /* tensor_names */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_TensorGroup_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_TensorGroup_identifier, &tflite_TensorGroup_verify_table);
}

static inline int tflite_TensorGroup_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_TensorGroup_identifier, &tflite_TensorGroup_verify_table);
}

static inline int tflite_TensorGroup_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_TensorGroup_type_identifier, &tflite_TensorGroup_verify_table);
}

static inline int tflite_TensorGroup_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_TensorGroup_type_identifier, &tflite_TensorGroup_verify_table);
}

static inline int tflite_TensorGroup_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_TensorGroup_verify_table);
}

static inline int tflite_TensorGroup_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_TensorGroup_verify_table);
}

static inline int tflite_TensorGroup_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_TensorGroup_verify_table);
}

static inline int tflite_TensorGroup_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_TensorGroup_verify_table);
}

static int tflite_TensorMetadata_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* description */)) return ret;
    if ((ret = flatcc_verify_string_vector_field(td, 2, 0) /* dimension_names */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 3, 0, &tflite_Content_verify_table) /* content */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 4, 0, &tflite_ProcessUnit_verify_table) /* process_units */)) return ret;
    if ((ret = flatcc_verify_table_field(td, 5, 0, &tflite_Stats_verify_table) /* stats */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 6, 0, &tflite_AssociatedFile_verify_table) /* associated_files */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_TensorMetadata_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_TensorMetadata_identifier, &tflite_TensorMetadata_verify_table);
}

static inline int tflite_TensorMetadata_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_TensorMetadata_identifier, &tflite_TensorMetadata_verify_table);
}

static inline int tflite_TensorMetadata_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_TensorMetadata_type_identifier, &tflite_TensorMetadata_verify_table);
}

static inline int tflite_TensorMetadata_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_TensorMetadata_type_identifier, &tflite_TensorMetadata_verify_table);
}

static inline int tflite_TensorMetadata_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_TensorMetadata_verify_table);
}

static inline int tflite_TensorMetadata_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_TensorMetadata_verify_table);
}

static inline int tflite_TensorMetadata_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_TensorMetadata_verify_table);
}

static inline int tflite_TensorMetadata_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_TensorMetadata_verify_table);
}

static int tflite_CustomMetadata_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_CustomMetadata_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_CustomMetadata_identifier, &tflite_CustomMetadata_verify_table);
}

static inline int tflite_CustomMetadata_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_CustomMetadata_identifier, &tflite_CustomMetadata_verify_table);
}

static inline int tflite_CustomMetadata_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_CustomMetadata_type_identifier, &tflite_CustomMetadata_verify_table);
}

static inline int tflite_CustomMetadata_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_CustomMetadata_type_identifier, &tflite_CustomMetadata_verify_table);
}

static inline int tflite_CustomMetadata_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_CustomMetadata_verify_table);
}

static inline int tflite_CustomMetadata_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_CustomMetadata_verify_table);
}

static inline int tflite_CustomMetadata_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_CustomMetadata_verify_table);
}

static inline int tflite_CustomMetadata_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_CustomMetadata_verify_table);
}

static int tflite_SubGraphMetadata_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* description */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 2, 0, &tflite_TensorMetadata_verify_table) /* input_tensor_metadata */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 3, 0, &tflite_TensorMetadata_verify_table) /* output_tensor_metadata */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 4, 0, &tflite_AssociatedFile_verify_table) /* associated_files */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 5, 0, &tflite_ProcessUnit_verify_table) /* input_process_units */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 6, 0, &tflite_ProcessUnit_verify_table) /* output_process_units */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 7, 0, &tflite_TensorGroup_verify_table) /* input_tensor_groups */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 8, 0, &tflite_TensorGroup_verify_table) /* output_tensor_groups */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 9, 0, &tflite_CustomMetadata_verify_table) /* custom_metadata */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_SubGraphMetadata_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SubGraphMetadata_identifier, &tflite_SubGraphMetadata_verify_table);
}

static inline int tflite_SubGraphMetadata_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_SubGraphMetadata_identifier, &tflite_SubGraphMetadata_verify_table);
}

static inline int tflite_SubGraphMetadata_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_SubGraphMetadata_type_identifier, &tflite_SubGraphMetadata_verify_table);
}

static inline int tflite_SubGraphMetadata_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_SubGraphMetadata_type_identifier, &tflite_SubGraphMetadata_verify_table);
}

static inline int tflite_SubGraphMetadata_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_SubGraphMetadata_verify_table);
}

static inline int tflite_SubGraphMetadata_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_SubGraphMetadata_verify_table);
}

static inline int tflite_SubGraphMetadata_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_SubGraphMetadata_verify_table);
}

static inline int tflite_SubGraphMetadata_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_SubGraphMetadata_verify_table);
}

static int tflite_ModelMetadata_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* description */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 2, 0) /* version */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 3, 0, &tflite_SubGraphMetadata_verify_table) /* subgraph_metadata */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 4, 0) /* author */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 5, 0) /* license */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 6, 0, &tflite_AssociatedFile_verify_table) /* associated_files */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 7, 0) /* min_parser_version */)) return ret;
    return flatcc_verify_ok;
}

static inline int tflite_ModelMetadata_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ModelMetadata_identifier, &tflite_ModelMetadata_verify_table);
}

static inline int tflite_ModelMetadata_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_ModelMetadata_identifier, &tflite_ModelMetadata_verify_table);
}

static inline int tflite_ModelMetadata_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, tflite_ModelMetadata_type_identifier, &tflite_ModelMetadata_verify_table);
}

static inline int tflite_ModelMetadata_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, tflite_ModelMetadata_type_identifier, &tflite_ModelMetadata_verify_table);
}

static inline int tflite_ModelMetadata_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &tflite_ModelMetadata_verify_table);
}

static inline int tflite_ModelMetadata_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &tflite_ModelMetadata_verify_table);
}

static inline int tflite_ModelMetadata_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &tflite_ModelMetadata_verify_table);
}

static inline int tflite_ModelMetadata_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &tflite_ModelMetadata_verify_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* TFLITE_VERIFIER_H */
