#ifndef ETM_READER_H
#define ETM_READER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "../flatbuffers_common_reader.h"
#endif
#include "../flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "../flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif


typedef const struct etm_Tensor_table *etm_Tensor_table_t;
typedef struct etm_Tensor_table *etm_Tensor_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_Tensor_vec_t;
typedef flatbuffers_uoffset_t *etm_Tensor_mutable_vec_t;
typedef const struct etm_AttrDataFloat_table *etm_AttrDataFloat_table_t;
typedef struct etm_AttrDataFloat_table *etm_AttrDataFloat_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_AttrDataFloat_vec_t;
typedef flatbuffers_uoffset_t *etm_AttrDataFloat_mutable_vec_t;
typedef const struct etm_AttrDataInt_table *etm_AttrDataInt_table_t;
typedef struct etm_AttrDataInt_table *etm_AttrDataInt_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_AttrDataInt_vec_t;
typedef flatbuffers_uoffset_t *etm_AttrDataInt_mutable_vec_t;
typedef const struct etm_AttrDataString_table *etm_AttrDataString_table_t;
typedef struct etm_AttrDataString_table *etm_AttrDataString_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_AttrDataString_vec_t;
typedef flatbuffers_uoffset_t *etm_AttrDataString_mutable_vec_t;
typedef const struct etm_AttrDataTensor_table *etm_AttrDataTensor_table_t;
typedef struct etm_AttrDataTensor_table *etm_AttrDataTensor_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_AttrDataTensor_vec_t;
typedef flatbuffers_uoffset_t *etm_AttrDataTensor_mutable_vec_t;
typedef const struct etm_AttrDataGraph_table *etm_AttrDataGraph_table_t;
typedef struct etm_AttrDataGraph_table *etm_AttrDataGraph_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_AttrDataGraph_vec_t;
typedef flatbuffers_uoffset_t *etm_AttrDataGraph_mutable_vec_t;
typedef const struct etm_AttrDataFloats_table *etm_AttrDataFloats_table_t;
typedef struct etm_AttrDataFloats_table *etm_AttrDataFloats_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_AttrDataFloats_vec_t;
typedef flatbuffers_uoffset_t *etm_AttrDataFloats_mutable_vec_t;
typedef const struct etm_AttrDataInts_table *etm_AttrDataInts_table_t;
typedef struct etm_AttrDataInts_table *etm_AttrDataInts_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_AttrDataInts_vec_t;
typedef flatbuffers_uoffset_t *etm_AttrDataInts_mutable_vec_t;
typedef const struct etm_AttrDataBytes_table *etm_AttrDataBytes_table_t;
typedef struct etm_AttrDataBytes_table *etm_AttrDataBytes_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_AttrDataBytes_vec_t;
typedef flatbuffers_uoffset_t *etm_AttrDataBytes_mutable_vec_t;
typedef const struct etm_AttrDataTensors_table *etm_AttrDataTensors_table_t;
typedef struct etm_AttrDataTensors_table *etm_AttrDataTensors_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_AttrDataTensors_vec_t;
typedef flatbuffers_uoffset_t *etm_AttrDataTensors_mutable_vec_t;
typedef const struct etm_AttrDataGraphs_table *etm_AttrDataGraphs_table_t;
typedef struct etm_AttrDataGraphs_table *etm_AttrDataGraphs_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_AttrDataGraphs_vec_t;
typedef flatbuffers_uoffset_t *etm_AttrDataGraphs_mutable_vec_t;
typedef const struct etm_Attr_table *etm_Attr_table_t;
typedef struct etm_Attr_table *etm_Attr_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_Attr_vec_t;
typedef flatbuffers_uoffset_t *etm_Attr_mutable_vec_t;
typedef const struct etm_Node_table *etm_Node_table_t;
typedef struct etm_Node_table *etm_Node_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_Node_vec_t;
typedef flatbuffers_uoffset_t *etm_Node_mutable_vec_t;
typedef const struct etm_Graph_table *etm_Graph_table_t;
typedef struct etm_Graph_table *etm_Graph_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_Graph_vec_t;
typedef flatbuffers_uoffset_t *etm_Graph_mutable_vec_t;
typedef const struct etm_Model_table *etm_Model_table_t;
typedef struct etm_Model_table *etm_Model_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_Model_vec_t;
typedef flatbuffers_uoffset_t *etm_Model_mutable_vec_t;
#ifndef etm_Tensor_file_identifier
#define etm_Tensor_file_identifier 0
#endif
/* deprecated, use etm_Tensor_file_identifier */
#ifndef etm_Tensor_identifier
#define etm_Tensor_identifier 0
#endif
#define etm_Tensor_type_hash ((flatbuffers_thash_t)0x4bf3c3e)
#define etm_Tensor_type_identifier "\x3e\x3c\xbf\x04"
#ifndef etm_Tensor_file_extension
#define etm_Tensor_file_extension "bin"
#endif
#ifndef etm_AttrDataFloat_file_identifier
#define etm_AttrDataFloat_file_identifier 0
#endif
/* deprecated, use etm_AttrDataFloat_file_identifier */
#ifndef etm_AttrDataFloat_identifier
#define etm_AttrDataFloat_identifier 0
#endif
#define etm_AttrDataFloat_type_hash ((flatbuffers_thash_t)0x45928dc2)
#define etm_AttrDataFloat_type_identifier "\xc2\x8d\x92\x45"
#ifndef etm_AttrDataFloat_file_extension
#define etm_AttrDataFloat_file_extension "bin"
#endif
#ifndef etm_AttrDataInt_file_identifier
#define etm_AttrDataInt_file_identifier 0
#endif
/* deprecated, use etm_AttrDataInt_file_identifier */
#ifndef etm_AttrDataInt_identifier
#define etm_AttrDataInt_identifier 0
#endif
#define etm_AttrDataInt_type_hash ((flatbuffers_thash_t)0x43866df9)
#define etm_AttrDataInt_type_identifier "\xf9\x6d\x86\x43"
#ifndef etm_AttrDataInt_file_extension
#define etm_AttrDataInt_file_extension "bin"
#endif
#ifndef etm_AttrDataString_file_identifier
#define etm_AttrDataString_file_identifier 0
#endif
/* deprecated, use etm_AttrDataString_file_identifier */
#ifndef etm_AttrDataString_identifier
#define etm_AttrDataString_identifier 0
#endif
#define etm_AttrDataString_type_hash ((flatbuffers_thash_t)0x1b755e61)
#define etm_AttrDataString_type_identifier "\x61\x5e\x75\x1b"
#ifndef etm_AttrDataString_file_extension
#define etm_AttrDataString_file_extension "bin"
#endif
#ifndef etm_AttrDataTensor_file_identifier
#define etm_AttrDataTensor_file_identifier 0
#endif
/* deprecated, use etm_AttrDataTensor_file_identifier */
#ifndef etm_AttrDataTensor_identifier
#define etm_AttrDataTensor_identifier 0
#endif
#define etm_AttrDataTensor_type_hash ((flatbuffers_thash_t)0xaed59341)
#define etm_AttrDataTensor_type_identifier "\x41\x93\xd5\xae"
#ifndef etm_AttrDataTensor_file_extension
#define etm_AttrDataTensor_file_extension "bin"
#endif
#ifndef etm_AttrDataGraph_file_identifier
#define etm_AttrDataGraph_file_identifier 0
#endif
/* deprecated, use etm_AttrDataGraph_file_identifier */
#ifndef etm_AttrDataGraph_identifier
#define etm_AttrDataGraph_identifier 0
#endif
#define etm_AttrDataGraph_type_hash ((flatbuffers_thash_t)0x50e7e41c)
#define etm_AttrDataGraph_type_identifier "\x1c\xe4\xe7\x50"
#ifndef etm_AttrDataGraph_file_extension
#define etm_AttrDataGraph_file_extension "bin"
#endif
#ifndef etm_AttrDataFloats_file_identifier
#define etm_AttrDataFloats_file_identifier 0
#endif
/* deprecated, use etm_AttrDataFloats_file_identifier */
#ifndef etm_AttrDataFloats_identifier
#define etm_AttrDataFloats_identifier 0
#endif
#define etm_AttrDataFloats_type_hash ((flatbuffers_thash_t)0x36b50da3)
#define etm_AttrDataFloats_type_identifier "\xa3\x0d\xb5\x36"
#ifndef etm_AttrDataFloats_file_extension
#define etm_AttrDataFloats_file_extension "bin"
#endif
#ifndef etm_AttrDataInts_file_identifier
#define etm_AttrDataInts_file_identifier 0
#endif
/* deprecated, use etm_AttrDataInts_file_identifier */
#ifndef etm_AttrDataInts_identifier
#define etm_AttrDataInts_identifier 0
#endif
#define etm_AttrDataInts_type_hash ((flatbuffers_thash_t)0xd69e703e)
#define etm_AttrDataInts_type_identifier "\x3e\x70\x9e\xd6"
#ifndef etm_AttrDataInts_file_extension
#define etm_AttrDataInts_file_extension "bin"
#endif
#ifndef etm_AttrDataBytes_file_identifier
#define etm_AttrDataBytes_file_identifier 0
#endif
/* deprecated, use etm_AttrDataBytes_file_identifier */
#ifndef etm_AttrDataBytes_identifier
#define etm_AttrDataBytes_identifier 0
#endif
#define etm_AttrDataBytes_type_hash ((flatbuffers_thash_t)0x50265743)
#define etm_AttrDataBytes_type_identifier "\x43\x57\x26\x50"
#ifndef etm_AttrDataBytes_file_extension
#define etm_AttrDataBytes_file_extension "bin"
#endif
#ifndef etm_AttrDataTensors_file_identifier
#define etm_AttrDataTensors_file_identifier 0
#endif
/* deprecated, use etm_AttrDataTensors_file_identifier */
#ifndef etm_AttrDataTensors_identifier
#define etm_AttrDataTensors_identifier 0
#endif
#define etm_AttrDataTensors_type_hash ((flatbuffers_thash_t)0x6c36b7b6)
#define etm_AttrDataTensors_type_identifier "\xb6\xb7\x36\x6c"
#ifndef etm_AttrDataTensors_file_extension
#define etm_AttrDataTensors_file_extension "bin"
#endif
#ifndef etm_AttrDataGraphs_file_identifier
#define etm_AttrDataGraphs_file_identifier 0
#endif
/* deprecated, use etm_AttrDataGraphs_file_identifier */
#ifndef etm_AttrDataGraphs_identifier
#define etm_AttrDataGraphs_identifier 0
#endif
#define etm_AttrDataGraphs_type_hash ((flatbuffers_thash_t)0xcc0c9abd)
#define etm_AttrDataGraphs_type_identifier "\xbd\x9a\x0c\xcc"
#ifndef etm_AttrDataGraphs_file_extension
#define etm_AttrDataGraphs_file_extension "bin"
#endif
#ifndef etm_Attr_file_identifier
#define etm_Attr_file_identifier 0
#endif
/* deprecated, use etm_Attr_file_identifier */
#ifndef etm_Attr_identifier
#define etm_Attr_identifier 0
#endif
#define etm_Attr_type_hash ((flatbuffers_thash_t)0x27e0df30)
#define etm_Attr_type_identifier "\x30\xdf\xe0\x27"
#ifndef etm_Attr_file_extension
#define etm_Attr_file_extension "bin"
#endif
#ifndef etm_Node_file_identifier
#define etm_Node_file_identifier 0
#endif
/* deprecated, use etm_Node_file_identifier */
#ifndef etm_Node_identifier
#define etm_Node_identifier 0
#endif
#define etm_Node_type_hash ((flatbuffers_thash_t)0x8a7a3df7)
#define etm_Node_type_identifier "\xf7\x3d\x7a\x8a"
#ifndef etm_Node_file_extension
#define etm_Node_file_extension "bin"
#endif
#ifndef etm_Graph_file_identifier
#define etm_Graph_file_identifier 0
#endif
/* deprecated, use etm_Graph_file_identifier */
#ifndef etm_Graph_identifier
#define etm_Graph_identifier 0
#endif
#define etm_Graph_type_hash ((flatbuffers_thash_t)0x62b6e685)
#define etm_Graph_type_identifier "\x85\xe6\xb6\x62"
#ifndef etm_Graph_file_extension
#define etm_Graph_file_extension "bin"
#endif
#ifndef etm_Model_file_identifier
#define etm_Model_file_identifier 0
#endif
/* deprecated, use etm_Model_file_identifier */
#ifndef etm_Model_identifier
#define etm_Model_identifier 0
#endif
#define etm_Model_type_hash ((flatbuffers_thash_t)0xc59c70f4)
#define etm_Model_type_identifier "\xf4\x70\x9c\xc5"
#ifndef etm_Model_file_extension
#define etm_Model_file_extension "bin"
#endif

typedef int32_t etm_TensorType_enum_t;
__flatbuffers_define_integer_type(etm_TensorType, etm_TensorType_enum_t, 32)
#define etm_TensorType_Undefined ((etm_TensorType_enum_t)INT32_C(0))
#define etm_TensorType_Bool ((etm_TensorType_enum_t)INT32_C(9))
#define etm_TensorType_Int8 ((etm_TensorType_enum_t)INT32_C(3))
#define etm_TensorType_Int16 ((etm_TensorType_enum_t)INT32_C(5))
#define etm_TensorType_Int32 ((etm_TensorType_enum_t)INT32_C(6))
#define etm_TensorType_Int64 ((etm_TensorType_enum_t)INT32_C(7))
#define etm_TensorType_Uint8 ((etm_TensorType_enum_t)INT32_C(2))
#define etm_TensorType_Uint16 ((etm_TensorType_enum_t)INT32_C(4))
#define etm_TensorType_Uint32 ((etm_TensorType_enum_t)INT32_C(12))
#define etm_TensorType_Uint64 ((etm_TensorType_enum_t)INT32_C(13))
#define etm_TensorType_Bfloat16 ((etm_TensorType_enum_t)INT32_C(16))
#define etm_TensorType_Float16 ((etm_TensorType_enum_t)INT32_C(10))
#define etm_TensorType_Float32 ((etm_TensorType_enum_t)INT32_C(1))
#define etm_TensorType_Float64 ((etm_TensorType_enum_t)INT32_C(11))
#define etm_TensorType_Complex64 ((etm_TensorType_enum_t)INT32_C(14))
#define etm_TensorType_Complex128 ((etm_TensorType_enum_t)INT32_C(15))
#define etm_TensorType_String ((etm_TensorType_enum_t)INT32_C(8))

static inline const char *etm_TensorType_name(etm_TensorType_enum_t value)
{
    switch (value) {
    case etm_TensorType_Undefined: return "Undefined";
    case etm_TensorType_Bool: return "Bool";
    case etm_TensorType_Int8: return "Int8";
    case etm_TensorType_Int16: return "Int16";
    case etm_TensorType_Int32: return "Int32";
    case etm_TensorType_Int64: return "Int64";
    case etm_TensorType_Uint8: return "Uint8";
    case etm_TensorType_Uint16: return "Uint16";
    case etm_TensorType_Uint32: return "Uint32";
    case etm_TensorType_Uint64: return "Uint64";
    case etm_TensorType_Bfloat16: return "Bfloat16";
    case etm_TensorType_Float16: return "Float16";
    case etm_TensorType_Float32: return "Float32";
    case etm_TensorType_Float64: return "Float64";
    case etm_TensorType_Complex64: return "Complex64";
    case etm_TensorType_Complex128: return "Complex128";
    case etm_TensorType_String: return "String";
    default: return "";
    }
}

static inline int etm_TensorType_is_known_value(etm_TensorType_enum_t value)
{
    switch (value) {
    case etm_TensorType_Undefined: return 1;
    case etm_TensorType_Bool: return 1;
    case etm_TensorType_Int8: return 1;
    case etm_TensorType_Int16: return 1;
    case etm_TensorType_Int32: return 1;
    case etm_TensorType_Int64: return 1;
    case etm_TensorType_Uint8: return 1;
    case etm_TensorType_Uint16: return 1;
    case etm_TensorType_Uint32: return 1;
    case etm_TensorType_Uint64: return 1;
    case etm_TensorType_Bfloat16: return 1;
    case etm_TensorType_Float16: return 1;
    case etm_TensorType_Float32: return 1;
    case etm_TensorType_Float64: return 1;
    case etm_TensorType_Complex64: return 1;
    case etm_TensorType_Complex128: return 1;
    case etm_TensorType_String: return 1;
    default: return 0;
    }
}

typedef int32_t etm_OpType_enum_t;
__flatbuffers_define_integer_type(etm_OpType, etm_OpType_enum_t, 32)
#define etm_OpType_Nop ((etm_OpType_enum_t)INT32_C(0))
#define etm_OpType_Abs ((etm_OpType_enum_t)INT32_C(1))
#define etm_OpType_Acos ((etm_OpType_enum_t)INT32_C(2))
#define etm_OpType_Acosh ((etm_OpType_enum_t)INT32_C(3))
#define etm_OpType_Add ((etm_OpType_enum_t)INT32_C(4))
#define etm_OpType_And ((etm_OpType_enum_t)INT32_C(5))
#define etm_OpType_ArgMax ((etm_OpType_enum_t)INT32_C(6))
#define etm_OpType_ArgMin ((etm_OpType_enum_t)INT32_C(7))
#define etm_OpType_Asin ((etm_OpType_enum_t)INT32_C(8))
#define etm_OpType_Asinh ((etm_OpType_enum_t)INT32_C(9))
#define etm_OpType_Atan ((etm_OpType_enum_t)INT32_C(10))
#define etm_OpType_Atanh ((etm_OpType_enum_t)INT32_C(11))
#define etm_OpType_AveragePool ((etm_OpType_enum_t)INT32_C(12))
#define etm_OpType_BatchNormalization ((etm_OpType_enum_t)INT32_C(13))
#define etm_OpType_BitShift ((etm_OpType_enum_t)INT32_C(14))
#define etm_OpType_Cast ((etm_OpType_enum_t)INT32_C(15))
#define etm_OpType_Ceil ((etm_OpType_enum_t)INT32_C(16))
#define etm_OpType_Clip ((etm_OpType_enum_t)INT32_C(17))
#define etm_OpType_Compress ((etm_OpType_enum_t)INT32_C(18))
#define etm_OpType_Concat ((etm_OpType_enum_t)INT32_C(19))
#define etm_OpType_ConcatFromSequence ((etm_OpType_enum_t)INT32_C(20))
#define etm_OpType_Constant ((etm_OpType_enum_t)INT32_C(21))
#define etm_OpType_ConstantOfShape ((etm_OpType_enum_t)INT32_C(22))
#define etm_OpType_Conv ((etm_OpType_enum_t)INT32_C(23))
#define etm_OpType_ConvInteger ((etm_OpType_enum_t)INT32_C(24))
#define etm_OpType_ConvTranspose ((etm_OpType_enum_t)INT32_C(25))
#define etm_OpType_Cos ((etm_OpType_enum_t)INT32_C(26))
#define etm_OpType_Cosh ((etm_OpType_enum_t)INT32_C(27))
#define etm_OpType_CumSum ((etm_OpType_enum_t)INT32_C(28))
#define etm_OpType_DepthToSpace ((etm_OpType_enum_t)INT32_C(29))
#define etm_OpType_DequantizeLinear ((etm_OpType_enum_t)INT32_C(30))
#define etm_OpType_Det ((etm_OpType_enum_t)INT32_C(31))
#define etm_OpType_Div ((etm_OpType_enum_t)INT32_C(32))
#define etm_OpType_Dropout ((etm_OpType_enum_t)INT32_C(33))
#define etm_OpType_Einsum ((etm_OpType_enum_t)INT32_C(34))
#define etm_OpType_Elu ((etm_OpType_enum_t)INT32_C(35))
#define etm_OpType_Equal ((etm_OpType_enum_t)INT32_C(36))
#define etm_OpType_Erf ((etm_OpType_enum_t)INT32_C(37))
#define etm_OpType_Exp ((etm_OpType_enum_t)INT32_C(38))
#define etm_OpType_Expand ((etm_OpType_enum_t)INT32_C(39))
#define etm_OpType_EyeLike ((etm_OpType_enum_t)INT32_C(40))
#define etm_OpType_Flatten ((etm_OpType_enum_t)INT32_C(41))
#define etm_OpType_Floor ((etm_OpType_enum_t)INT32_C(42))
#define etm_OpType_GRU ((etm_OpType_enum_t)INT32_C(43))
#define etm_OpType_Gather ((etm_OpType_enum_t)INT32_C(44))
#define etm_OpType_GatherElements ((etm_OpType_enum_t)INT32_C(45))
#define etm_OpType_GatherND ((etm_OpType_enum_t)INT32_C(46))
#define etm_OpType_Gemm ((etm_OpType_enum_t)INT32_C(47))
#define etm_OpType_GlobalAveragePool ((etm_OpType_enum_t)INT32_C(48))
#define etm_OpType_GlobalLpPool ((etm_OpType_enum_t)INT32_C(49))
#define etm_OpType_GlobalMaxPool ((etm_OpType_enum_t)INT32_C(50))
#define etm_OpType_Greater ((etm_OpType_enum_t)INT32_C(51))
#define etm_OpType_HardSigmoid ((etm_OpType_enum_t)INT32_C(52))
#define etm_OpType_Hardmax ((etm_OpType_enum_t)INT32_C(53))
#define etm_OpType_Identity ((etm_OpType_enum_t)INT32_C(54))
#define etm_OpType_If ((etm_OpType_enum_t)INT32_C(55))
#define etm_OpType_InstanceNormalization ((etm_OpType_enum_t)INT32_C(56))
#define etm_OpType_IsInf ((etm_OpType_enum_t)INT32_C(57))
#define etm_OpType_IsNaN ((etm_OpType_enum_t)INT32_C(58))
#define etm_OpType_LRN ((etm_OpType_enum_t)INT32_C(59))
#define etm_OpType_LSTM ((etm_OpType_enum_t)INT32_C(60))
#define etm_OpType_LeakyRelu ((etm_OpType_enum_t)INT32_C(61))
#define etm_OpType_Less ((etm_OpType_enum_t)INT32_C(62))
#define etm_OpType_Log ((etm_OpType_enum_t)INT32_C(63))
#define etm_OpType_Loop ((etm_OpType_enum_t)INT32_C(64))
#define etm_OpType_LpNormalization ((etm_OpType_enum_t)INT32_C(65))
#define etm_OpType_LpPool ((etm_OpType_enum_t)INT32_C(66))
#define etm_OpType_MatMul ((etm_OpType_enum_t)INT32_C(67))
#define etm_OpType_MatMulInteger ((etm_OpType_enum_t)INT32_C(68))
#define etm_OpType_Max ((etm_OpType_enum_t)INT32_C(69))
#define etm_OpType_MaxPool ((etm_OpType_enum_t)INT32_C(70))
#define etm_OpType_MaxRoiPool ((etm_OpType_enum_t)INT32_C(71))
#define etm_OpType_MaxUnpool ((etm_OpType_enum_t)INT32_C(72))
#define etm_OpType_Mean ((etm_OpType_enum_t)INT32_C(73))
#define etm_OpType_Min ((etm_OpType_enum_t)INT32_C(74))
#define etm_OpType_Mod ((etm_OpType_enum_t)INT32_C(75))
#define etm_OpType_Mul ((etm_OpType_enum_t)INT32_C(76))
#define etm_OpType_Multinomial ((etm_OpType_enum_t)INT32_C(77))
#define etm_OpType_Neg ((etm_OpType_enum_t)INT32_C(78))
#define etm_OpType_NonMaxSuppression ((etm_OpType_enum_t)INT32_C(79))
#define etm_OpType_NonZero ((etm_OpType_enum_t)INT32_C(80))
#define etm_OpType_Not ((etm_OpType_enum_t)INT32_C(81))
#define etm_OpType_OneHot ((etm_OpType_enum_t)INT32_C(82))
#define etm_OpType_Or ((etm_OpType_enum_t)INT32_C(83))
#define etm_OpType_PRelu ((etm_OpType_enum_t)INT32_C(84))
#define etm_OpType_Pad ((etm_OpType_enum_t)INT32_C(85))
#define etm_OpType_Pow ((etm_OpType_enum_t)INT32_C(86))
#define etm_OpType_QLinearConv ((etm_OpType_enum_t)INT32_C(87))
#define etm_OpType_QLinearMatMul ((etm_OpType_enum_t)INT32_C(88))
#define etm_OpType_QuantizeLinear ((etm_OpType_enum_t)INT32_C(89))
#define etm_OpType_RNN ((etm_OpType_enum_t)INT32_C(90))
#define etm_OpType_RandomNormal ((etm_OpType_enum_t)INT32_C(91))
#define etm_OpType_RandomNormalLike ((etm_OpType_enum_t)INT32_C(92))
#define etm_OpType_RandomUniform ((etm_OpType_enum_t)INT32_C(93))
#define etm_OpType_RandomUniformLike ((etm_OpType_enum_t)INT32_C(94))
#define etm_OpType_Reciprocal ((etm_OpType_enum_t)INT32_C(95))
#define etm_OpType_ReduceL1 ((etm_OpType_enum_t)INT32_C(96))
#define etm_OpType_ReduceL2 ((etm_OpType_enum_t)INT32_C(97))
#define etm_OpType_ReduceLogSum ((etm_OpType_enum_t)INT32_C(98))
#define etm_OpType_ReduceLogSumExp ((etm_OpType_enum_t)INT32_C(99))
#define etm_OpType_ReduceMax ((etm_OpType_enum_t)INT32_C(100))
#define etm_OpType_ReduceMean ((etm_OpType_enum_t)INT32_C(101))
#define etm_OpType_ReduceMin ((etm_OpType_enum_t)INT32_C(102))
#define etm_OpType_ReduceProd ((etm_OpType_enum_t)INT32_C(103))
#define etm_OpType_ReduceSum ((etm_OpType_enum_t)INT32_C(104))
#define etm_OpType_ReduceSumSquare ((etm_OpType_enum_t)INT32_C(105))
#define etm_OpType_Relu ((etm_OpType_enum_t)INT32_C(106))
#define etm_OpType_Reshape ((etm_OpType_enum_t)INT32_C(107))
#define etm_OpType_Resize ((etm_OpType_enum_t)INT32_C(108))
#define etm_OpType_ReverseSequence ((etm_OpType_enum_t)INT32_C(109))
#define etm_OpType_RoiAlign ((etm_OpType_enum_t)INT32_C(110))
#define etm_OpType_Round ((etm_OpType_enum_t)INT32_C(111))
#define etm_OpType_Scan ((etm_OpType_enum_t)INT32_C(112))
#define etm_OpType_Scatter ((etm_OpType_enum_t)INT32_C(113))
#define etm_OpType_ScatterElements ((etm_OpType_enum_t)INT32_C(114))
#define etm_OpType_ScatterND ((etm_OpType_enum_t)INT32_C(115))
#define etm_OpType_Selu ((etm_OpType_enum_t)INT32_C(116))
#define etm_OpType_SequenceAt ((etm_OpType_enum_t)INT32_C(117))
#define etm_OpType_SequenceConstruct ((etm_OpType_enum_t)INT32_C(118))
#define etm_OpType_SequenceEmpty ((etm_OpType_enum_t)INT32_C(119))
#define etm_OpType_SequenceErase ((etm_OpType_enum_t)INT32_C(120))
#define etm_OpType_SequenceInsert ((etm_OpType_enum_t)INT32_C(121))
#define etm_OpType_SequenceLength ((etm_OpType_enum_t)INT32_C(122))
#define etm_OpType_Shape ((etm_OpType_enum_t)INT32_C(123))
#define etm_OpType_Shrink ((etm_OpType_enum_t)INT32_C(124))
#define etm_OpType_Sigmoid ((etm_OpType_enum_t)INT32_C(125))
#define etm_OpType_Sign ((etm_OpType_enum_t)INT32_C(126))
#define etm_OpType_Sin ((etm_OpType_enum_t)INT32_C(127))
#define etm_OpType_Sinh ((etm_OpType_enum_t)INT32_C(128))
#define etm_OpType_Size ((etm_OpType_enum_t)INT32_C(129))
#define etm_OpType_Slice ((etm_OpType_enum_t)INT32_C(130))
#define etm_OpType_Softplus ((etm_OpType_enum_t)INT32_C(131))
#define etm_OpType_Softsign ((etm_OpType_enum_t)INT32_C(132))
#define etm_OpType_SpaceToDepth ((etm_OpType_enum_t)INT32_C(133))
#define etm_OpType_Split ((etm_OpType_enum_t)INT32_C(134))
#define etm_OpType_SplitToSequence ((etm_OpType_enum_t)INT32_C(135))
#define etm_OpType_Sqrt ((etm_OpType_enum_t)INT32_C(136))
#define etm_OpType_Squeeze ((etm_OpType_enum_t)INT32_C(137))
#define etm_OpType_StringNormalizer ((etm_OpType_enum_t)INT32_C(138))
#define etm_OpType_Sub ((etm_OpType_enum_t)INT32_C(139))
#define etm_OpType_Sum ((etm_OpType_enum_t)INT32_C(140))
#define etm_OpType_Tan ((etm_OpType_enum_t)INT32_C(141))
#define etm_OpType_Tanh ((etm_OpType_enum_t)INT32_C(142))
#define etm_OpType_TfIdfVectorizer ((etm_OpType_enum_t)INT32_C(143))
#define etm_OpType_ThresholdedRelu ((etm_OpType_enum_t)INT32_C(144))
#define etm_OpType_Tile ((etm_OpType_enum_t)INT32_C(145))
#define etm_OpType_TopK ((etm_OpType_enum_t)INT32_C(146))
#define etm_OpType_Transpose ((etm_OpType_enum_t)INT32_C(147))
#define etm_OpType_Unique ((etm_OpType_enum_t)INT32_C(148))
#define etm_OpType_Unsqueeze ((etm_OpType_enum_t)INT32_C(149))
#define etm_OpType_Upsample ((etm_OpType_enum_t)INT32_C(150))
#define etm_OpType_Where ((etm_OpType_enum_t)INT32_C(151))
#define etm_OpType_Xor ((etm_OpType_enum_t)INT32_C(152))
#define etm_OpType_Celu ((etm_OpType_enum_t)INT32_C(153))
#define etm_OpType_DynamicQuantizeLinear ((etm_OpType_enum_t)INT32_C(154))
#define etm_OpType_GreaterOrEqual ((etm_OpType_enum_t)INT32_C(155))
#define etm_OpType_LessOrEqual ((etm_OpType_enum_t)INT32_C(156))
#define etm_OpType_LogSoftmax ((etm_OpType_enum_t)INT32_C(157))
#define etm_OpType_MeanVarianceNormalization ((etm_OpType_enum_t)INT32_C(158))
#define etm_OpType_NegativeLogLikelihoodLoss ((etm_OpType_enum_t)INT32_C(159))
#define etm_OpType_Range ((etm_OpType_enum_t)INT32_C(160))
#define etm_OpType_Softmax ((etm_OpType_enum_t)INT32_C(161))
#define etm_OpType_SoftmaxCrossEntropyLoss ((etm_OpType_enum_t)INT32_C(162))

static inline const char *etm_OpType_name(etm_OpType_enum_t value)
{
    switch (value) {
    case etm_OpType_Nop: return "Nop";
    case etm_OpType_Abs: return "Abs";
    case etm_OpType_Acos: return "Acos";
    case etm_OpType_Acosh: return "Acosh";
    case etm_OpType_Add: return "Add";
    case etm_OpType_And: return "And";
    case etm_OpType_ArgMax: return "ArgMax";
    case etm_OpType_ArgMin: return "ArgMin";
    case etm_OpType_Asin: return "Asin";
    case etm_OpType_Asinh: return "Asinh";
    case etm_OpType_Atan: return "Atan";
    case etm_OpType_Atanh: return "Atanh";
    case etm_OpType_AveragePool: return "AveragePool";
    case etm_OpType_BatchNormalization: return "BatchNormalization";
    case etm_OpType_BitShift: return "BitShift";
    case etm_OpType_Cast: return "Cast";
    case etm_OpType_Ceil: return "Ceil";
    case etm_OpType_Clip: return "Clip";
    case etm_OpType_Compress: return "Compress";
    case etm_OpType_Concat: return "Concat";
    case etm_OpType_ConcatFromSequence: return "ConcatFromSequence";
    case etm_OpType_Constant: return "Constant";
    case etm_OpType_ConstantOfShape: return "ConstantOfShape";
    case etm_OpType_Conv: return "Conv";
    case etm_OpType_ConvInteger: return "ConvInteger";
    case etm_OpType_ConvTranspose: return "ConvTranspose";
    case etm_OpType_Cos: return "Cos";
    case etm_OpType_Cosh: return "Cosh";
    case etm_OpType_CumSum: return "CumSum";
    case etm_OpType_DepthToSpace: return "DepthToSpace";
    case etm_OpType_DequantizeLinear: return "DequantizeLinear";
    case etm_OpType_Det: return "Det";
    case etm_OpType_Div: return "Div";
    case etm_OpType_Dropout: return "Dropout";
    case etm_OpType_Einsum: return "Einsum";
    case etm_OpType_Elu: return "Elu";
    case etm_OpType_Equal: return "Equal";
    case etm_OpType_Erf: return "Erf";
    case etm_OpType_Exp: return "Exp";
    case etm_OpType_Expand: return "Expand";
    case etm_OpType_EyeLike: return "EyeLike";
    case etm_OpType_Flatten: return "Flatten";
    case etm_OpType_Floor: return "Floor";
    case etm_OpType_GRU: return "GRU";
    case etm_OpType_Gather: return "Gather";
    case etm_OpType_GatherElements: return "GatherElements";
    case etm_OpType_GatherND: return "GatherND";
    case etm_OpType_Gemm: return "Gemm";
    case etm_OpType_GlobalAveragePool: return "GlobalAveragePool";
    case etm_OpType_GlobalLpPool: return "GlobalLpPool";
    case etm_OpType_GlobalMaxPool: return "GlobalMaxPool";
    case etm_OpType_Greater: return "Greater";
    case etm_OpType_HardSigmoid: return "HardSigmoid";
    case etm_OpType_Hardmax: return "Hardmax";
    case etm_OpType_Identity: return "Identity";
    case etm_OpType_If: return "If";
    case etm_OpType_InstanceNormalization: return "InstanceNormalization";
    case etm_OpType_IsInf: return "IsInf";
    case etm_OpType_IsNaN: return "IsNaN";
    case etm_OpType_LRN: return "LRN";
    case etm_OpType_LSTM: return "LSTM";
    case etm_OpType_LeakyRelu: return "LeakyRelu";
    case etm_OpType_Less: return "Less";
    case etm_OpType_Log: return "Log";
    case etm_OpType_Loop: return "Loop";
    case etm_OpType_LpNormalization: return "LpNormalization";
    case etm_OpType_LpPool: return "LpPool";
    case etm_OpType_MatMul: return "MatMul";
    case etm_OpType_MatMulInteger: return "MatMulInteger";
    case etm_OpType_Max: return "Max";
    case etm_OpType_MaxPool: return "MaxPool";
    case etm_OpType_MaxRoiPool: return "MaxRoiPool";
    case etm_OpType_MaxUnpool: return "MaxUnpool";
    case etm_OpType_Mean: return "Mean";
    case etm_OpType_Min: return "Min";
    case etm_OpType_Mod: return "Mod";
    case etm_OpType_Mul: return "Mul";
    case etm_OpType_Multinomial: return "Multinomial";
    case etm_OpType_Neg: return "Neg";
    case etm_OpType_NonMaxSuppression: return "NonMaxSuppression";
    case etm_OpType_NonZero: return "NonZero";
    case etm_OpType_Not: return "Not";
    case etm_OpType_OneHot: return "OneHot";
    case etm_OpType_Or: return "Or";
    case etm_OpType_PRelu: return "PRelu";
    case etm_OpType_Pad: return "Pad";
    case etm_OpType_Pow: return "Pow";
    case etm_OpType_QLinearConv: return "QLinearConv";
    case etm_OpType_QLinearMatMul: return "QLinearMatMul";
    case etm_OpType_QuantizeLinear: return "QuantizeLinear";
    case etm_OpType_RNN: return "RNN";
    case etm_OpType_RandomNormal: return "RandomNormal";
    case etm_OpType_RandomNormalLike: return "RandomNormalLike";
    case etm_OpType_RandomUniform: return "RandomUniform";
    case etm_OpType_RandomUniformLike: return "RandomUniformLike";
    case etm_OpType_Reciprocal: return "Reciprocal";
    case etm_OpType_ReduceL1: return "ReduceL1";
    case etm_OpType_ReduceL2: return "ReduceL2";
    case etm_OpType_ReduceLogSum: return "ReduceLogSum";
    case etm_OpType_ReduceLogSumExp: return "ReduceLogSumExp";
    case etm_OpType_ReduceMax: return "ReduceMax";
    case etm_OpType_ReduceMean: return "ReduceMean";
    case etm_OpType_ReduceMin: return "ReduceMin";
    case etm_OpType_ReduceProd: return "ReduceProd";
    case etm_OpType_ReduceSum: return "ReduceSum";
    case etm_OpType_ReduceSumSquare: return "ReduceSumSquare";
    case etm_OpType_Relu: return "Relu";
    case etm_OpType_Reshape: return "Reshape";
    case etm_OpType_Resize: return "Resize";
    case etm_OpType_ReverseSequence: return "ReverseSequence";
    case etm_OpType_RoiAlign: return "RoiAlign";
    case etm_OpType_Round: return "Round";
    case etm_OpType_Scan: return "Scan";
    case etm_OpType_Scatter: return "Scatter";
    case etm_OpType_ScatterElements: return "ScatterElements";
    case etm_OpType_ScatterND: return "ScatterND";
    case etm_OpType_Selu: return "Selu";
    case etm_OpType_SequenceAt: return "SequenceAt";
    case etm_OpType_SequenceConstruct: return "SequenceConstruct";
    case etm_OpType_SequenceEmpty: return "SequenceEmpty";
    case etm_OpType_SequenceErase: return "SequenceErase";
    case etm_OpType_SequenceInsert: return "SequenceInsert";
    case etm_OpType_SequenceLength: return "SequenceLength";
    case etm_OpType_Shape: return "Shape";
    case etm_OpType_Shrink: return "Shrink";
    case etm_OpType_Sigmoid: return "Sigmoid";
    case etm_OpType_Sign: return "Sign";
    case etm_OpType_Sin: return "Sin";
    case etm_OpType_Sinh: return "Sinh";
    case etm_OpType_Size: return "Size";
    case etm_OpType_Slice: return "Slice";
    case etm_OpType_Softplus: return "Softplus";
    case etm_OpType_Softsign: return "Softsign";
    case etm_OpType_SpaceToDepth: return "SpaceToDepth";
    case etm_OpType_Split: return "Split";
    case etm_OpType_SplitToSequence: return "SplitToSequence";
    case etm_OpType_Sqrt: return "Sqrt";
    case etm_OpType_Squeeze: return "Squeeze";
    case etm_OpType_StringNormalizer: return "StringNormalizer";
    case etm_OpType_Sub: return "Sub";
    case etm_OpType_Sum: return "Sum";
    case etm_OpType_Tan: return "Tan";
    case etm_OpType_Tanh: return "Tanh";
    case etm_OpType_TfIdfVectorizer: return "TfIdfVectorizer";
    case etm_OpType_ThresholdedRelu: return "ThresholdedRelu";
    case etm_OpType_Tile: return "Tile";
    case etm_OpType_TopK: return "TopK";
    case etm_OpType_Transpose: return "Transpose";
    case etm_OpType_Unique: return "Unique";
    case etm_OpType_Unsqueeze: return "Unsqueeze";
    case etm_OpType_Upsample: return "Upsample";
    case etm_OpType_Where: return "Where";
    case etm_OpType_Xor: return "Xor";
    case etm_OpType_Celu: return "Celu";
    case etm_OpType_DynamicQuantizeLinear: return "DynamicQuantizeLinear";
    case etm_OpType_GreaterOrEqual: return "GreaterOrEqual";
    case etm_OpType_LessOrEqual: return "LessOrEqual";
    case etm_OpType_LogSoftmax: return "LogSoftmax";
    case etm_OpType_MeanVarianceNormalization: return "MeanVarianceNormalization";
    case etm_OpType_NegativeLogLikelihoodLoss: return "NegativeLogLikelihoodLoss";
    case etm_OpType_Range: return "Range";
    case etm_OpType_Softmax: return "Softmax";
    case etm_OpType_SoftmaxCrossEntropyLoss: return "SoftmaxCrossEntropyLoss";
    default: return "";
    }
}

static inline int etm_OpType_is_known_value(etm_OpType_enum_t value)
{
    switch (value) {
    case etm_OpType_Nop: return 1;
    case etm_OpType_Abs: return 1;
    case etm_OpType_Acos: return 1;
    case etm_OpType_Acosh: return 1;
    case etm_OpType_Add: return 1;
    case etm_OpType_And: return 1;
    case etm_OpType_ArgMax: return 1;
    case etm_OpType_ArgMin: return 1;
    case etm_OpType_Asin: return 1;
    case etm_OpType_Asinh: return 1;
    case etm_OpType_Atan: return 1;
    case etm_OpType_Atanh: return 1;
    case etm_OpType_AveragePool: return 1;
    case etm_OpType_BatchNormalization: return 1;
    case etm_OpType_BitShift: return 1;
    case etm_OpType_Cast: return 1;
    case etm_OpType_Ceil: return 1;
    case etm_OpType_Clip: return 1;
    case etm_OpType_Compress: return 1;
    case etm_OpType_Concat: return 1;
    case etm_OpType_ConcatFromSequence: return 1;
    case etm_OpType_Constant: return 1;
    case etm_OpType_ConstantOfShape: return 1;
    case etm_OpType_Conv: return 1;
    case etm_OpType_ConvInteger: return 1;
    case etm_OpType_ConvTranspose: return 1;
    case etm_OpType_Cos: return 1;
    case etm_OpType_Cosh: return 1;
    case etm_OpType_CumSum: return 1;
    case etm_OpType_DepthToSpace: return 1;
    case etm_OpType_DequantizeLinear: return 1;
    case etm_OpType_Det: return 1;
    case etm_OpType_Div: return 1;
    case etm_OpType_Dropout: return 1;
    case etm_OpType_Einsum: return 1;
    case etm_OpType_Elu: return 1;
    case etm_OpType_Equal: return 1;
    case etm_OpType_Erf: return 1;
    case etm_OpType_Exp: return 1;
    case etm_OpType_Expand: return 1;
    case etm_OpType_EyeLike: return 1;
    case etm_OpType_Flatten: return 1;
    case etm_OpType_Floor: return 1;
    case etm_OpType_GRU: return 1;
    case etm_OpType_Gather: return 1;
    case etm_OpType_GatherElements: return 1;
    case etm_OpType_GatherND: return 1;
    case etm_OpType_Gemm: return 1;
    case etm_OpType_GlobalAveragePool: return 1;
    case etm_OpType_GlobalLpPool: return 1;
    case etm_OpType_GlobalMaxPool: return 1;
    case etm_OpType_Greater: return 1;
    case etm_OpType_HardSigmoid: return 1;
    case etm_OpType_Hardmax: return 1;
    case etm_OpType_Identity: return 1;
    case etm_OpType_If: return 1;
    case etm_OpType_InstanceNormalization: return 1;
    case etm_OpType_IsInf: return 1;
    case etm_OpType_IsNaN: return 1;
    case etm_OpType_LRN: return 1;
    case etm_OpType_LSTM: return 1;
    case etm_OpType_LeakyRelu: return 1;
    case etm_OpType_Less: return 1;
    case etm_OpType_Log: return 1;
    case etm_OpType_Loop: return 1;
    case etm_OpType_LpNormalization: return 1;
    case etm_OpType_LpPool: return 1;
    case etm_OpType_MatMul: return 1;
    case etm_OpType_MatMulInteger: return 1;
    case etm_OpType_Max: return 1;
    case etm_OpType_MaxPool: return 1;
    case etm_OpType_MaxRoiPool: return 1;
    case etm_OpType_MaxUnpool: return 1;
    case etm_OpType_Mean: return 1;
    case etm_OpType_Min: return 1;
    case etm_OpType_Mod: return 1;
    case etm_OpType_Mul: return 1;
    case etm_OpType_Multinomial: return 1;
    case etm_OpType_Neg: return 1;
    case etm_OpType_NonMaxSuppression: return 1;
    case etm_OpType_NonZero: return 1;
    case etm_OpType_Not: return 1;
    case etm_OpType_OneHot: return 1;
    case etm_OpType_Or: return 1;
    case etm_OpType_PRelu: return 1;
    case etm_OpType_Pad: return 1;
    case etm_OpType_Pow: return 1;
    case etm_OpType_QLinearConv: return 1;
    case etm_OpType_QLinearMatMul: return 1;
    case etm_OpType_QuantizeLinear: return 1;
    case etm_OpType_RNN: return 1;
    case etm_OpType_RandomNormal: return 1;
    case etm_OpType_RandomNormalLike: return 1;
    case etm_OpType_RandomUniform: return 1;
    case etm_OpType_RandomUniformLike: return 1;
    case etm_OpType_Reciprocal: return 1;
    case etm_OpType_ReduceL1: return 1;
    case etm_OpType_ReduceL2: return 1;
    case etm_OpType_ReduceLogSum: return 1;
    case etm_OpType_ReduceLogSumExp: return 1;
    case etm_OpType_ReduceMax: return 1;
    case etm_OpType_ReduceMean: return 1;
    case etm_OpType_ReduceMin: return 1;
    case etm_OpType_ReduceProd: return 1;
    case etm_OpType_ReduceSum: return 1;
    case etm_OpType_ReduceSumSquare: return 1;
    case etm_OpType_Relu: return 1;
    case etm_OpType_Reshape: return 1;
    case etm_OpType_Resize: return 1;
    case etm_OpType_ReverseSequence: return 1;
    case etm_OpType_RoiAlign: return 1;
    case etm_OpType_Round: return 1;
    case etm_OpType_Scan: return 1;
    case etm_OpType_Scatter: return 1;
    case etm_OpType_ScatterElements: return 1;
    case etm_OpType_ScatterND: return 1;
    case etm_OpType_Selu: return 1;
    case etm_OpType_SequenceAt: return 1;
    case etm_OpType_SequenceConstruct: return 1;
    case etm_OpType_SequenceEmpty: return 1;
    case etm_OpType_SequenceErase: return 1;
    case etm_OpType_SequenceInsert: return 1;
    case etm_OpType_SequenceLength: return 1;
    case etm_OpType_Shape: return 1;
    case etm_OpType_Shrink: return 1;
    case etm_OpType_Sigmoid: return 1;
    case etm_OpType_Sign: return 1;
    case etm_OpType_Sin: return 1;
    case etm_OpType_Sinh: return 1;
    case etm_OpType_Size: return 1;
    case etm_OpType_Slice: return 1;
    case etm_OpType_Softplus: return 1;
    case etm_OpType_Softsign: return 1;
    case etm_OpType_SpaceToDepth: return 1;
    case etm_OpType_Split: return 1;
    case etm_OpType_SplitToSequence: return 1;
    case etm_OpType_Sqrt: return 1;
    case etm_OpType_Squeeze: return 1;
    case etm_OpType_StringNormalizer: return 1;
    case etm_OpType_Sub: return 1;
    case etm_OpType_Sum: return 1;
    case etm_OpType_Tan: return 1;
    case etm_OpType_Tanh: return 1;
    case etm_OpType_TfIdfVectorizer: return 1;
    case etm_OpType_ThresholdedRelu: return 1;
    case etm_OpType_Tile: return 1;
    case etm_OpType_TopK: return 1;
    case etm_OpType_Transpose: return 1;
    case etm_OpType_Unique: return 1;
    case etm_OpType_Unsqueeze: return 1;
    case etm_OpType_Upsample: return 1;
    case etm_OpType_Where: return 1;
    case etm_OpType_Xor: return 1;
    case etm_OpType_Celu: return 1;
    case etm_OpType_DynamicQuantizeLinear: return 1;
    case etm_OpType_GreaterOrEqual: return 1;
    case etm_OpType_LessOrEqual: return 1;
    case etm_OpType_LogSoftmax: return 1;
    case etm_OpType_MeanVarianceNormalization: return 1;
    case etm_OpType_NegativeLogLikelihoodLoss: return 1;
    case etm_OpType_Range: return 1;
    case etm_OpType_Softmax: return 1;
    case etm_OpType_SoftmaxCrossEntropyLoss: return 1;
    default: return 0;
    }
}



struct etm_Tensor_table { uint8_t unused__; };

static inline size_t etm_Tensor_vec_len(etm_Tensor_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_Tensor_table_t etm_Tensor_vec_at(etm_Tensor_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_Tensor_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_Tensor)

__flatbuffers_define_scalar_field(0, etm_Tensor, type, etm_TensorType, etm_TensorType_enum_t, INT32_C(0))
__flatbuffers_define_string_field(1, etm_Tensor, name, 0)
__flatbuffers_define_vector_field(2, etm_Tensor, dims, flatbuffers_int32_vec_t, 0)
__flatbuffers_define_vector_field(3, etm_Tensor, datas, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_scalar_field(4, etm_Tensor, ndata, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_scalar_field(5, etm_Tensor, isParam, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(6, etm_Tensor, layout, flatbuffers_uint8, uint8_t, UINT8_C(0))

struct etm_AttrDataFloat_table { uint8_t unused__; };

static inline size_t etm_AttrDataFloat_vec_len(etm_AttrDataFloat_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_AttrDataFloat_table_t etm_AttrDataFloat_vec_at(etm_AttrDataFloat_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_AttrDataFloat_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_AttrDataFloat)

__flatbuffers_define_scalar_field(0, etm_AttrDataFloat, f, flatbuffers_float, float, 0.00000000f)

struct etm_AttrDataInt_table { uint8_t unused__; };

static inline size_t etm_AttrDataInt_vec_len(etm_AttrDataInt_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_AttrDataInt_table_t etm_AttrDataInt_vec_at(etm_AttrDataInt_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_AttrDataInt_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_AttrDataInt)

__flatbuffers_define_scalar_field(0, etm_AttrDataInt, i, flatbuffers_int64, int64_t, INT64_C(0))

struct etm_AttrDataString_table { uint8_t unused__; };

static inline size_t etm_AttrDataString_vec_len(etm_AttrDataString_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_AttrDataString_table_t etm_AttrDataString_vec_at(etm_AttrDataString_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_AttrDataString_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_AttrDataString)

__flatbuffers_define_string_field(0, etm_AttrDataString, s, 0)

struct etm_AttrDataTensor_table { uint8_t unused__; };

static inline size_t etm_AttrDataTensor_vec_len(etm_AttrDataTensor_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_AttrDataTensor_table_t etm_AttrDataTensor_vec_at(etm_AttrDataTensor_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_AttrDataTensor_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_AttrDataTensor)

__flatbuffers_define_table_field(0, etm_AttrDataTensor, t, etm_Tensor_table_t, 0)

struct etm_AttrDataGraph_table { uint8_t unused__; };

static inline size_t etm_AttrDataGraph_vec_len(etm_AttrDataGraph_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_AttrDataGraph_table_t etm_AttrDataGraph_vec_at(etm_AttrDataGraph_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_AttrDataGraph_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_AttrDataGraph)

__flatbuffers_define_table_field(0, etm_AttrDataGraph, g, etm_Graph_table_t, 0)

struct etm_AttrDataFloats_table { uint8_t unused__; };

static inline size_t etm_AttrDataFloats_vec_len(etm_AttrDataFloats_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_AttrDataFloats_table_t etm_AttrDataFloats_vec_at(etm_AttrDataFloats_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_AttrDataFloats_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_AttrDataFloats)

__flatbuffers_define_vector_field(0, etm_AttrDataFloats, fs, flatbuffers_float_vec_t, 0)

struct etm_AttrDataInts_table { uint8_t unused__; };

static inline size_t etm_AttrDataInts_vec_len(etm_AttrDataInts_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_AttrDataInts_table_t etm_AttrDataInts_vec_at(etm_AttrDataInts_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_AttrDataInts_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_AttrDataInts)

__flatbuffers_define_vector_field(0, etm_AttrDataInts, is, flatbuffers_int64_vec_t, 0)

struct etm_AttrDataBytes_table { uint8_t unused__; };

static inline size_t etm_AttrDataBytes_vec_len(etm_AttrDataBytes_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_AttrDataBytes_table_t etm_AttrDataBytes_vec_at(etm_AttrDataBytes_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_AttrDataBytes_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_AttrDataBytes)

__flatbuffers_define_vector_field(0, etm_AttrDataBytes, is, flatbuffers_uint8_vec_t, 0)

struct etm_AttrDataTensors_table { uint8_t unused__; };

static inline size_t etm_AttrDataTensors_vec_len(etm_AttrDataTensors_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_AttrDataTensors_table_t etm_AttrDataTensors_vec_at(etm_AttrDataTensors_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_AttrDataTensors_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_AttrDataTensors)

__flatbuffers_define_vector_field(0, etm_AttrDataTensors, ts, etm_Tensor_vec_t, 0)

struct etm_AttrDataGraphs_table { uint8_t unused__; };

static inline size_t etm_AttrDataGraphs_vec_len(etm_AttrDataGraphs_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_AttrDataGraphs_table_t etm_AttrDataGraphs_vec_at(etm_AttrDataGraphs_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_AttrDataGraphs_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_AttrDataGraphs)

__flatbuffers_define_vector_field(0, etm_AttrDataGraphs, gs, etm_Graph_vec_t, 0)
typedef uint8_t etm_AttrData_union_type_t;
__flatbuffers_define_integer_type(etm_AttrData, etm_AttrData_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, etm_AttrData)
#define etm_AttrData_NONE ((etm_AttrData_union_type_t)UINT8_C(0))
#define etm_AttrData_AttrDataFloat ((etm_AttrData_union_type_t)UINT8_C(1))
#define etm_AttrData_AttrDataInt ((etm_AttrData_union_type_t)UINT8_C(2))
#define etm_AttrData_AttrDataString ((etm_AttrData_union_type_t)UINT8_C(3))
#define etm_AttrData_AttrDataTensor ((etm_AttrData_union_type_t)UINT8_C(4))
#define etm_AttrData_AttrDataGraph ((etm_AttrData_union_type_t)UINT8_C(5))
#define etm_AttrData_AttrDataFloats ((etm_AttrData_union_type_t)UINT8_C(6))
#define etm_AttrData_AttrDataInts ((etm_AttrData_union_type_t)UINT8_C(7))
#define etm_AttrData_AttrDataBytes ((etm_AttrData_union_type_t)UINT8_C(8))
#define etm_AttrData_AttrDataTensors ((etm_AttrData_union_type_t)UINT8_C(9))
#define etm_AttrData_AttrDataGraphs ((etm_AttrData_union_type_t)UINT8_C(10))

static inline const char *etm_AttrData_type_name(etm_AttrData_union_type_t type)
{
    switch (type) {
    case etm_AttrData_NONE: return "NONE";
    case etm_AttrData_AttrDataFloat: return "AttrDataFloat";
    case etm_AttrData_AttrDataInt: return "AttrDataInt";
    case etm_AttrData_AttrDataString: return "AttrDataString";
    case etm_AttrData_AttrDataTensor: return "AttrDataTensor";
    case etm_AttrData_AttrDataGraph: return "AttrDataGraph";
    case etm_AttrData_AttrDataFloats: return "AttrDataFloats";
    case etm_AttrData_AttrDataInts: return "AttrDataInts";
    case etm_AttrData_AttrDataBytes: return "AttrDataBytes";
    case etm_AttrData_AttrDataTensors: return "AttrDataTensors";
    case etm_AttrData_AttrDataGraphs: return "AttrDataGraphs";
    default: return "";
    }
}

static inline int etm_AttrData_is_known_type(etm_AttrData_union_type_t type)
{
    switch (type) {
    case etm_AttrData_NONE: return 1;
    case etm_AttrData_AttrDataFloat: return 1;
    case etm_AttrData_AttrDataInt: return 1;
    case etm_AttrData_AttrDataString: return 1;
    case etm_AttrData_AttrDataTensor: return 1;
    case etm_AttrData_AttrDataGraph: return 1;
    case etm_AttrData_AttrDataFloats: return 1;
    case etm_AttrData_AttrDataInts: return 1;
    case etm_AttrData_AttrDataBytes: return 1;
    case etm_AttrData_AttrDataTensors: return 1;
    case etm_AttrData_AttrDataGraphs: return 1;
    default: return 0;
    }
}


struct etm_Attr_table { uint8_t unused__; };

static inline size_t etm_Attr_vec_len(etm_Attr_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_Attr_table_t etm_Attr_vec_at(etm_Attr_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_Attr_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_Attr)

__flatbuffers_define_string_field(0, etm_Attr, k, 0)
__flatbuffers_define_union_field(flatbuffers_, 2, etm_Attr, v, etm_AttrData, 0)

struct etm_Node_table { uint8_t unused__; };

static inline size_t etm_Node_vec_len(etm_Node_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_Node_table_t etm_Node_vec_at(etm_Node_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_Node_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_Node)

__flatbuffers_define_string_field(0, etm_Node, name, 0)
__flatbuffers_define_vector_field(1, etm_Node, in, flatbuffers_uint16_vec_t, 0)
__flatbuffers_define_vector_field(2, etm_Node, out, flatbuffers_uint16_vec_t, 0)
__flatbuffers_define_scalar_field(3, etm_Node, optype, etm_OpType, etm_OpType_enum_t, INT32_C(0))
__flatbuffers_define_vector_field(4, etm_Node, attrs, etm_Attr_vec_t, 0)

struct etm_Graph_table { uint8_t unused__; };

static inline size_t etm_Graph_vec_len(etm_Graph_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_Graph_table_t etm_Graph_vec_at(etm_Graph_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_Graph_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_Graph)

__flatbuffers_define_vector_field(0, etm_Graph, tensors, etm_Tensor_vec_t, 0)
__flatbuffers_define_vector_field(1, etm_Graph, nodes, etm_Node_vec_t, 0)
__flatbuffers_define_scalar_field(2, etm_Graph, layout, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_vector_field(3, etm_Graph, in, flatbuffers_uint16_vec_t, 0)
__flatbuffers_define_vector_field(4, etm_Graph, out, flatbuffers_uint16_vec_t, 0)

struct etm_Model_table { uint8_t unused__; };

static inline size_t etm_Model_vec_len(etm_Model_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_Model_table_t etm_Model_vec_at(etm_Model_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_Model_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_Model)

__flatbuffers_define_string_field(0, etm_Model, name, 0)
__flatbuffers_define_vector_field(1, etm_Model, graphs, etm_Graph_vec_t, 0)


#include "../flatcc/flatcc_epilogue.h"
#endif /* ETM_READER_H */
