#ifndef ETM_BUILDER_H
#define ETM_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef ETM_READER_H
#include "etm_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "../flatbuffers_common_builder.h"
#endif
#include "../flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

#define __etm_TensorType_formal_args , etm_TensorType_enum_t v0
#define __etm_TensorType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, etm_TensorType, etm_TensorType_enum_t)
#define __etm_OpType_formal_args , etm_OpType_enum_t v0
#define __etm_OpType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, etm_OpType, etm_OpType_enum_t)

typedef flatbuffers_union_ref_t etm_AttrData_union_ref_t;
typedef flatbuffers_union_vec_ref_t etm_AttrData_union_vec_ref_t;
static etm_AttrData_union_ref_t etm_AttrData_clone(flatbuffers_builder_t *B, etm_AttrData_union_t t);

static const flatbuffers_voffset_t __etm_Tensor_required[] = { 0 };
typedef flatbuffers_ref_t etm_Tensor_ref_t;
static etm_Tensor_ref_t etm_Tensor_clone(flatbuffers_builder_t *B, etm_Tensor_table_t t);
__flatbuffers_build_table(flatbuffers_, etm_Tensor, 7)

static const flatbuffers_voffset_t __etm_AttrDataFloat_required[] = { 0 };
typedef flatbuffers_ref_t etm_AttrDataFloat_ref_t;
static etm_AttrDataFloat_ref_t etm_AttrDataFloat_clone(flatbuffers_builder_t *B, etm_AttrDataFloat_table_t t);
__flatbuffers_build_table(flatbuffers_, etm_AttrDataFloat, 1)

static const flatbuffers_voffset_t __etm_AttrDataInt_required[] = { 0 };
typedef flatbuffers_ref_t etm_AttrDataInt_ref_t;
static etm_AttrDataInt_ref_t etm_AttrDataInt_clone(flatbuffers_builder_t *B, etm_AttrDataInt_table_t t);
__flatbuffers_build_table(flatbuffers_, etm_AttrDataInt, 1)

static const flatbuffers_voffset_t __etm_AttrDataString_required[] = { 0 };
typedef flatbuffers_ref_t etm_AttrDataString_ref_t;
static etm_AttrDataString_ref_t etm_AttrDataString_clone(flatbuffers_builder_t *B, etm_AttrDataString_table_t t);
__flatbuffers_build_table(flatbuffers_, etm_AttrDataString, 1)

static const flatbuffers_voffset_t __etm_AttrDataTensor_required[] = { 0 };
typedef flatbuffers_ref_t etm_AttrDataTensor_ref_t;
static etm_AttrDataTensor_ref_t etm_AttrDataTensor_clone(flatbuffers_builder_t *B, etm_AttrDataTensor_table_t t);
__flatbuffers_build_table(flatbuffers_, etm_AttrDataTensor, 1)

static const flatbuffers_voffset_t __etm_AttrDataGraph_required[] = { 0 };
typedef flatbuffers_ref_t etm_AttrDataGraph_ref_t;
static etm_AttrDataGraph_ref_t etm_AttrDataGraph_clone(flatbuffers_builder_t *B, etm_AttrDataGraph_table_t t);
__flatbuffers_build_table(flatbuffers_, etm_AttrDataGraph, 1)

static const flatbuffers_voffset_t __etm_AttrDataFloats_required[] = { 0 };
typedef flatbuffers_ref_t etm_AttrDataFloats_ref_t;
static etm_AttrDataFloats_ref_t etm_AttrDataFloats_clone(flatbuffers_builder_t *B, etm_AttrDataFloats_table_t t);
__flatbuffers_build_table(flatbuffers_, etm_AttrDataFloats, 1)

static const flatbuffers_voffset_t __etm_AttrDataInts_required[] = { 0 };
typedef flatbuffers_ref_t etm_AttrDataInts_ref_t;
static etm_AttrDataInts_ref_t etm_AttrDataInts_clone(flatbuffers_builder_t *B, etm_AttrDataInts_table_t t);
__flatbuffers_build_table(flatbuffers_, etm_AttrDataInts, 1)

static const flatbuffers_voffset_t __etm_AttrDataBytes_required[] = { 0 };
typedef flatbuffers_ref_t etm_AttrDataBytes_ref_t;
static etm_AttrDataBytes_ref_t etm_AttrDataBytes_clone(flatbuffers_builder_t *B, etm_AttrDataBytes_table_t t);
__flatbuffers_build_table(flatbuffers_, etm_AttrDataBytes, 1)

static const flatbuffers_voffset_t __etm_AttrDataTensors_required[] = { 0 };
typedef flatbuffers_ref_t etm_AttrDataTensors_ref_t;
static etm_AttrDataTensors_ref_t etm_AttrDataTensors_clone(flatbuffers_builder_t *B, etm_AttrDataTensors_table_t t);
__flatbuffers_build_table(flatbuffers_, etm_AttrDataTensors, 1)

static const flatbuffers_voffset_t __etm_AttrDataGraphs_required[] = { 0 };
typedef flatbuffers_ref_t etm_AttrDataGraphs_ref_t;
static etm_AttrDataGraphs_ref_t etm_AttrDataGraphs_clone(flatbuffers_builder_t *B, etm_AttrDataGraphs_table_t t);
__flatbuffers_build_table(flatbuffers_, etm_AttrDataGraphs, 1)

static const flatbuffers_voffset_t __etm_Attr_required[] = { 0 };
typedef flatbuffers_ref_t etm_Attr_ref_t;
static etm_Attr_ref_t etm_Attr_clone(flatbuffers_builder_t *B, etm_Attr_table_t t);
__flatbuffers_build_table(flatbuffers_, etm_Attr, 3)

static const flatbuffers_voffset_t __etm_Node_required[] = { 0 };
typedef flatbuffers_ref_t etm_Node_ref_t;
static etm_Node_ref_t etm_Node_clone(flatbuffers_builder_t *B, etm_Node_table_t t);
__flatbuffers_build_table(flatbuffers_, etm_Node, 5)

static const flatbuffers_voffset_t __etm_Graph_required[] = { 0 };
typedef flatbuffers_ref_t etm_Graph_ref_t;
static etm_Graph_ref_t etm_Graph_clone(flatbuffers_builder_t *B, etm_Graph_table_t t);
__flatbuffers_build_table(flatbuffers_, etm_Graph, 5)

static const flatbuffers_voffset_t __etm_Model_required[] = { 0 };
typedef flatbuffers_ref_t etm_Model_ref_t;
static etm_Model_ref_t etm_Model_clone(flatbuffers_builder_t *B, etm_Model_table_t t);
__flatbuffers_build_table(flatbuffers_, etm_Model, 2)

#define __etm_Tensor_formal_args ,\
  etm_TensorType_enum_t v0, flatbuffers_string_ref_t v1, flatbuffers_int32_vec_ref_t v2, flatbuffers_uint8_vec_ref_t v3,\
  uint64_t v4, flatbuffers_bool_t v5, uint8_t v6
#define __etm_Tensor_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6
static inline etm_Tensor_ref_t etm_Tensor_create(flatbuffers_builder_t *B __etm_Tensor_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, etm_Tensor, etm_Tensor_file_identifier, etm_Tensor_type_identifier)

#define __etm_AttrDataFloat_formal_args , float v0
#define __etm_AttrDataFloat_call_args , v0
static inline etm_AttrDataFloat_ref_t etm_AttrDataFloat_create(flatbuffers_builder_t *B __etm_AttrDataFloat_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, etm_AttrDataFloat, etm_AttrDataFloat_file_identifier, etm_AttrDataFloat_type_identifier)

#define __etm_AttrDataInt_formal_args , int64_t v0
#define __etm_AttrDataInt_call_args , v0
static inline etm_AttrDataInt_ref_t etm_AttrDataInt_create(flatbuffers_builder_t *B __etm_AttrDataInt_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, etm_AttrDataInt, etm_AttrDataInt_file_identifier, etm_AttrDataInt_type_identifier)

#define __etm_AttrDataString_formal_args , flatbuffers_string_ref_t v0
#define __etm_AttrDataString_call_args , v0
static inline etm_AttrDataString_ref_t etm_AttrDataString_create(flatbuffers_builder_t *B __etm_AttrDataString_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, etm_AttrDataString, etm_AttrDataString_file_identifier, etm_AttrDataString_type_identifier)

#define __etm_AttrDataTensor_formal_args , etm_Tensor_ref_t v0
#define __etm_AttrDataTensor_call_args , v0
static inline etm_AttrDataTensor_ref_t etm_AttrDataTensor_create(flatbuffers_builder_t *B __etm_AttrDataTensor_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, etm_AttrDataTensor, etm_AttrDataTensor_file_identifier, etm_AttrDataTensor_type_identifier)

#define __etm_AttrDataGraph_formal_args , etm_Graph_ref_t v0
#define __etm_AttrDataGraph_call_args , v0
static inline etm_AttrDataGraph_ref_t etm_AttrDataGraph_create(flatbuffers_builder_t *B __etm_AttrDataGraph_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, etm_AttrDataGraph, etm_AttrDataGraph_file_identifier, etm_AttrDataGraph_type_identifier)

#define __etm_AttrDataFloats_formal_args , flatbuffers_float_vec_ref_t v0
#define __etm_AttrDataFloats_call_args , v0
static inline etm_AttrDataFloats_ref_t etm_AttrDataFloats_create(flatbuffers_builder_t *B __etm_AttrDataFloats_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, etm_AttrDataFloats, etm_AttrDataFloats_file_identifier, etm_AttrDataFloats_type_identifier)

#define __etm_AttrDataInts_formal_args , flatbuffers_int64_vec_ref_t v0
#define __etm_AttrDataInts_call_args , v0
static inline etm_AttrDataInts_ref_t etm_AttrDataInts_create(flatbuffers_builder_t *B __etm_AttrDataInts_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, etm_AttrDataInts, etm_AttrDataInts_file_identifier, etm_AttrDataInts_type_identifier)

#define __etm_AttrDataBytes_formal_args , flatbuffers_uint8_vec_ref_t v0
#define __etm_AttrDataBytes_call_args , v0
static inline etm_AttrDataBytes_ref_t etm_AttrDataBytes_create(flatbuffers_builder_t *B __etm_AttrDataBytes_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, etm_AttrDataBytes, etm_AttrDataBytes_file_identifier, etm_AttrDataBytes_type_identifier)

#define __etm_AttrDataTensors_formal_args , etm_Tensor_vec_ref_t v0
#define __etm_AttrDataTensors_call_args , v0
static inline etm_AttrDataTensors_ref_t etm_AttrDataTensors_create(flatbuffers_builder_t *B __etm_AttrDataTensors_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, etm_AttrDataTensors, etm_AttrDataTensors_file_identifier, etm_AttrDataTensors_type_identifier)

#define __etm_AttrDataGraphs_formal_args , etm_Graph_vec_ref_t v0
#define __etm_AttrDataGraphs_call_args , v0
static inline etm_AttrDataGraphs_ref_t etm_AttrDataGraphs_create(flatbuffers_builder_t *B __etm_AttrDataGraphs_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, etm_AttrDataGraphs, etm_AttrDataGraphs_file_identifier, etm_AttrDataGraphs_type_identifier)

#define __etm_Attr_formal_args , flatbuffers_string_ref_t v0, etm_AttrData_union_ref_t v2
#define __etm_Attr_call_args , v0, v2
static inline etm_Attr_ref_t etm_Attr_create(flatbuffers_builder_t *B __etm_Attr_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, etm_Attr, etm_Attr_file_identifier, etm_Attr_type_identifier)

#define __etm_Node_formal_args ,\
  flatbuffers_string_ref_t v0, flatbuffers_uint16_vec_ref_t v1, flatbuffers_uint16_vec_ref_t v2, etm_OpType_enum_t v3, etm_Attr_vec_ref_t v4
#define __etm_Node_call_args ,\
  v0, v1, v2, v3, v4
static inline etm_Node_ref_t etm_Node_create(flatbuffers_builder_t *B __etm_Node_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, etm_Node, etm_Node_file_identifier, etm_Node_type_identifier)

#define __etm_Graph_formal_args ,\
  etm_Tensor_vec_ref_t v0, etm_Node_vec_ref_t v1, uint8_t v2, flatbuffers_uint16_vec_ref_t v3, flatbuffers_uint16_vec_ref_t v4
#define __etm_Graph_call_args ,\
  v0, v1, v2, v3, v4
static inline etm_Graph_ref_t etm_Graph_create(flatbuffers_builder_t *B __etm_Graph_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, etm_Graph, etm_Graph_file_identifier, etm_Graph_type_identifier)

#define __etm_Model_formal_args , flatbuffers_string_ref_t v0, etm_Graph_vec_ref_t v1
#define __etm_Model_call_args , v0, v1
static inline etm_Model_ref_t etm_Model_create(flatbuffers_builder_t *B __etm_Model_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, etm_Model, etm_Model_file_identifier, etm_Model_type_identifier)

static inline etm_AttrData_union_ref_t etm_AttrData_as_NONE(void)
{ etm_AttrData_union_ref_t uref; uref.type = etm_AttrData_NONE; uref.value = 0; return uref; }
static inline etm_AttrData_union_ref_t etm_AttrData_as_AttrDataFloat(etm_AttrDataFloat_ref_t ref)
{ etm_AttrData_union_ref_t uref; uref.type = etm_AttrData_AttrDataFloat; uref.value = ref; return uref; }
static inline etm_AttrData_union_ref_t etm_AttrData_as_AttrDataInt(etm_AttrDataInt_ref_t ref)
{ etm_AttrData_union_ref_t uref; uref.type = etm_AttrData_AttrDataInt; uref.value = ref; return uref; }
static inline etm_AttrData_union_ref_t etm_AttrData_as_AttrDataString(etm_AttrDataString_ref_t ref)
{ etm_AttrData_union_ref_t uref; uref.type = etm_AttrData_AttrDataString; uref.value = ref; return uref; }
static inline etm_AttrData_union_ref_t etm_AttrData_as_AttrDataTensor(etm_AttrDataTensor_ref_t ref)
{ etm_AttrData_union_ref_t uref; uref.type = etm_AttrData_AttrDataTensor; uref.value = ref; return uref; }
static inline etm_AttrData_union_ref_t etm_AttrData_as_AttrDataGraph(etm_AttrDataGraph_ref_t ref)
{ etm_AttrData_union_ref_t uref; uref.type = etm_AttrData_AttrDataGraph; uref.value = ref; return uref; }
static inline etm_AttrData_union_ref_t etm_AttrData_as_AttrDataFloats(etm_AttrDataFloats_ref_t ref)
{ etm_AttrData_union_ref_t uref; uref.type = etm_AttrData_AttrDataFloats; uref.value = ref; return uref; }
static inline etm_AttrData_union_ref_t etm_AttrData_as_AttrDataInts(etm_AttrDataInts_ref_t ref)
{ etm_AttrData_union_ref_t uref; uref.type = etm_AttrData_AttrDataInts; uref.value = ref; return uref; }
static inline etm_AttrData_union_ref_t etm_AttrData_as_AttrDataBytes(etm_AttrDataBytes_ref_t ref)
{ etm_AttrData_union_ref_t uref; uref.type = etm_AttrData_AttrDataBytes; uref.value = ref; return uref; }
static inline etm_AttrData_union_ref_t etm_AttrData_as_AttrDataTensors(etm_AttrDataTensors_ref_t ref)
{ etm_AttrData_union_ref_t uref; uref.type = etm_AttrData_AttrDataTensors; uref.value = ref; return uref; }
static inline etm_AttrData_union_ref_t etm_AttrData_as_AttrDataGraphs(etm_AttrDataGraphs_ref_t ref)
{ etm_AttrData_union_ref_t uref; uref.type = etm_AttrData_AttrDataGraphs; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, etm_AttrData)

static etm_AttrData_union_ref_t etm_AttrData_clone(flatbuffers_builder_t *B, etm_AttrData_union_t u)
{
    switch (u.type) {
    case 1: return etm_AttrData_as_AttrDataFloat(etm_AttrDataFloat_clone(B, (etm_AttrDataFloat_table_t)u.value));
    case 2: return etm_AttrData_as_AttrDataInt(etm_AttrDataInt_clone(B, (etm_AttrDataInt_table_t)u.value));
    case 3: return etm_AttrData_as_AttrDataString(etm_AttrDataString_clone(B, (etm_AttrDataString_table_t)u.value));
    case 4: return etm_AttrData_as_AttrDataTensor(etm_AttrDataTensor_clone(B, (etm_AttrDataTensor_table_t)u.value));
    case 5: return etm_AttrData_as_AttrDataGraph(etm_AttrDataGraph_clone(B, (etm_AttrDataGraph_table_t)u.value));
    case 6: return etm_AttrData_as_AttrDataFloats(etm_AttrDataFloats_clone(B, (etm_AttrDataFloats_table_t)u.value));
    case 7: return etm_AttrData_as_AttrDataInts(etm_AttrDataInts_clone(B, (etm_AttrDataInts_table_t)u.value));
    case 8: return etm_AttrData_as_AttrDataBytes(etm_AttrDataBytes_clone(B, (etm_AttrDataBytes_table_t)u.value));
    case 9: return etm_AttrData_as_AttrDataTensors(etm_AttrDataTensors_clone(B, (etm_AttrDataTensors_table_t)u.value));
    case 10: return etm_AttrData_as_AttrDataGraphs(etm_AttrDataGraphs_clone(B, (etm_AttrDataGraphs_table_t)u.value));
    default: return etm_AttrData_as_NONE();
    }
}

__flatbuffers_build_scalar_field(0, flatbuffers_, etm_Tensor_type, etm_TensorType, etm_TensorType_enum_t, 4, 4, INT32_C(0), etm_Tensor)
__flatbuffers_build_string_field(1, flatbuffers_, etm_Tensor_name, etm_Tensor)
__flatbuffers_build_vector_field(2, flatbuffers_, etm_Tensor_dims, flatbuffers_int32, int32_t, etm_Tensor)
__flatbuffers_build_vector_field(3, flatbuffers_, etm_Tensor_datas, flatbuffers_uint8, uint8_t, etm_Tensor)
__flatbuffers_build_scalar_field(4, flatbuffers_, etm_Tensor_ndata, flatbuffers_uint64, uint64_t, 8, 8, UINT64_C(0), etm_Tensor)
__flatbuffers_build_scalar_field(5, flatbuffers_, etm_Tensor_isParam, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), etm_Tensor)
__flatbuffers_build_scalar_field(6, flatbuffers_, etm_Tensor_layout, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), etm_Tensor)

static inline etm_Tensor_ref_t etm_Tensor_create(flatbuffers_builder_t *B __etm_Tensor_formal_args)
{
    if (etm_Tensor_start(B)
        || etm_Tensor_ndata_add(B, v4)
        || etm_Tensor_type_add(B, v0)
        || etm_Tensor_name_add(B, v1)
        || etm_Tensor_dims_add(B, v2)
        || etm_Tensor_datas_add(B, v3)
        || etm_Tensor_isParam_add(B, v5)
        || etm_Tensor_layout_add(B, v6)) {
        return 0;
    }
    return etm_Tensor_end(B);
}

static etm_Tensor_ref_t etm_Tensor_clone(flatbuffers_builder_t *B, etm_Tensor_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (etm_Tensor_start(B)
        || etm_Tensor_ndata_pick(B, t)
        || etm_Tensor_type_pick(B, t)
        || etm_Tensor_name_pick(B, t)
        || etm_Tensor_dims_pick(B, t)
        || etm_Tensor_datas_pick(B, t)
        || etm_Tensor_isParam_pick(B, t)
        || etm_Tensor_layout_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, etm_Tensor_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, etm_AttrDataFloat_f, flatbuffers_float, float, 4, 4, 0.00000000f, etm_AttrDataFloat)

static inline etm_AttrDataFloat_ref_t etm_AttrDataFloat_create(flatbuffers_builder_t *B __etm_AttrDataFloat_formal_args)
{
    if (etm_AttrDataFloat_start(B)
        || etm_AttrDataFloat_f_add(B, v0)) {
        return 0;
    }
    return etm_AttrDataFloat_end(B);
}

static etm_AttrDataFloat_ref_t etm_AttrDataFloat_clone(flatbuffers_builder_t *B, etm_AttrDataFloat_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (etm_AttrDataFloat_start(B)
        || etm_AttrDataFloat_f_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, etm_AttrDataFloat_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, etm_AttrDataInt_i, flatbuffers_int64, int64_t, 8, 8, INT64_C(0), etm_AttrDataInt)

static inline etm_AttrDataInt_ref_t etm_AttrDataInt_create(flatbuffers_builder_t *B __etm_AttrDataInt_formal_args)
{
    if (etm_AttrDataInt_start(B)
        || etm_AttrDataInt_i_add(B, v0)) {
        return 0;
    }
    return etm_AttrDataInt_end(B);
}

static etm_AttrDataInt_ref_t etm_AttrDataInt_clone(flatbuffers_builder_t *B, etm_AttrDataInt_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (etm_AttrDataInt_start(B)
        || etm_AttrDataInt_i_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, etm_AttrDataInt_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, etm_AttrDataString_s, etm_AttrDataString)

static inline etm_AttrDataString_ref_t etm_AttrDataString_create(flatbuffers_builder_t *B __etm_AttrDataString_formal_args)
{
    if (etm_AttrDataString_start(B)
        || etm_AttrDataString_s_add(B, v0)) {
        return 0;
    }
    return etm_AttrDataString_end(B);
}

static etm_AttrDataString_ref_t etm_AttrDataString_clone(flatbuffers_builder_t *B, etm_AttrDataString_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (etm_AttrDataString_start(B)
        || etm_AttrDataString_s_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, etm_AttrDataString_end(B));
}

__flatbuffers_build_table_field(0, flatbuffers_, etm_AttrDataTensor_t, etm_Tensor, etm_AttrDataTensor)

static inline etm_AttrDataTensor_ref_t etm_AttrDataTensor_create(flatbuffers_builder_t *B __etm_AttrDataTensor_formal_args)
{
    if (etm_AttrDataTensor_start(B)
        || etm_AttrDataTensor_t_add(B, v0)) {
        return 0;
    }
    return etm_AttrDataTensor_end(B);
}

static etm_AttrDataTensor_ref_t etm_AttrDataTensor_clone(flatbuffers_builder_t *B, etm_AttrDataTensor_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (etm_AttrDataTensor_start(B)
        || etm_AttrDataTensor_t_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, etm_AttrDataTensor_end(B));
}

__flatbuffers_build_table_field(0, flatbuffers_, etm_AttrDataGraph_g, etm_Graph, etm_AttrDataGraph)

static inline etm_AttrDataGraph_ref_t etm_AttrDataGraph_create(flatbuffers_builder_t *B __etm_AttrDataGraph_formal_args)
{
    if (etm_AttrDataGraph_start(B)
        || etm_AttrDataGraph_g_add(B, v0)) {
        return 0;
    }
    return etm_AttrDataGraph_end(B);
}

static etm_AttrDataGraph_ref_t etm_AttrDataGraph_clone(flatbuffers_builder_t *B, etm_AttrDataGraph_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (etm_AttrDataGraph_start(B)
        || etm_AttrDataGraph_g_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, etm_AttrDataGraph_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, etm_AttrDataFloats_fs, flatbuffers_float, float, etm_AttrDataFloats)

static inline etm_AttrDataFloats_ref_t etm_AttrDataFloats_create(flatbuffers_builder_t *B __etm_AttrDataFloats_formal_args)
{
    if (etm_AttrDataFloats_start(B)
        || etm_AttrDataFloats_fs_add(B, v0)) {
        return 0;
    }
    return etm_AttrDataFloats_end(B);
}

static etm_AttrDataFloats_ref_t etm_AttrDataFloats_clone(flatbuffers_builder_t *B, etm_AttrDataFloats_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (etm_AttrDataFloats_start(B)
        || etm_AttrDataFloats_fs_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, etm_AttrDataFloats_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, etm_AttrDataInts_is, flatbuffers_int64, int64_t, etm_AttrDataInts)

static inline etm_AttrDataInts_ref_t etm_AttrDataInts_create(flatbuffers_builder_t *B __etm_AttrDataInts_formal_args)
{
    if (etm_AttrDataInts_start(B)
        || etm_AttrDataInts_is_add(B, v0)) {
        return 0;
    }
    return etm_AttrDataInts_end(B);
}

static etm_AttrDataInts_ref_t etm_AttrDataInts_clone(flatbuffers_builder_t *B, etm_AttrDataInts_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (etm_AttrDataInts_start(B)
        || etm_AttrDataInts_is_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, etm_AttrDataInts_end(B));
}

__flatbuffers_build_vector_field(0, flatbuffers_, etm_AttrDataBytes_is, flatbuffers_uint8, uint8_t, etm_AttrDataBytes)

static inline etm_AttrDataBytes_ref_t etm_AttrDataBytes_create(flatbuffers_builder_t *B __etm_AttrDataBytes_formal_args)
{
    if (etm_AttrDataBytes_start(B)
        || etm_AttrDataBytes_is_add(B, v0)) {
        return 0;
    }
    return etm_AttrDataBytes_end(B);
}

static etm_AttrDataBytes_ref_t etm_AttrDataBytes_clone(flatbuffers_builder_t *B, etm_AttrDataBytes_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (etm_AttrDataBytes_start(B)
        || etm_AttrDataBytes_is_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, etm_AttrDataBytes_end(B));
}

__flatbuffers_build_table_vector_field(0, flatbuffers_, etm_AttrDataTensors_ts, etm_Tensor, etm_AttrDataTensors)

static inline etm_AttrDataTensors_ref_t etm_AttrDataTensors_create(flatbuffers_builder_t *B __etm_AttrDataTensors_formal_args)
{
    if (etm_AttrDataTensors_start(B)
        || etm_AttrDataTensors_ts_add(B, v0)) {
        return 0;
    }
    return etm_AttrDataTensors_end(B);
}

static etm_AttrDataTensors_ref_t etm_AttrDataTensors_clone(flatbuffers_builder_t *B, etm_AttrDataTensors_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (etm_AttrDataTensors_start(B)
        || etm_AttrDataTensors_ts_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, etm_AttrDataTensors_end(B));
}

__flatbuffers_build_table_vector_field(0, flatbuffers_, etm_AttrDataGraphs_gs, etm_Graph, etm_AttrDataGraphs)

static inline etm_AttrDataGraphs_ref_t etm_AttrDataGraphs_create(flatbuffers_builder_t *B __etm_AttrDataGraphs_formal_args)
{
    if (etm_AttrDataGraphs_start(B)
        || etm_AttrDataGraphs_gs_add(B, v0)) {
        return 0;
    }
    return etm_AttrDataGraphs_end(B);
}

static etm_AttrDataGraphs_ref_t etm_AttrDataGraphs_clone(flatbuffers_builder_t *B, etm_AttrDataGraphs_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (etm_AttrDataGraphs_start(B)
        || etm_AttrDataGraphs_gs_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, etm_AttrDataGraphs_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, etm_Attr_k, etm_Attr)
__flatbuffers_build_union_field(2, flatbuffers_, etm_Attr_v, etm_AttrData, etm_Attr)
__flatbuffers_build_union_table_value_field(flatbuffers_, etm_Attr_v, etm_AttrData, AttrDataFloat, etm_AttrDataFloat)
__flatbuffers_build_union_table_value_field(flatbuffers_, etm_Attr_v, etm_AttrData, AttrDataInt, etm_AttrDataInt)
__flatbuffers_build_union_table_value_field(flatbuffers_, etm_Attr_v, etm_AttrData, AttrDataString, etm_AttrDataString)
__flatbuffers_build_union_table_value_field(flatbuffers_, etm_Attr_v, etm_AttrData, AttrDataTensor, etm_AttrDataTensor)
__flatbuffers_build_union_table_value_field(flatbuffers_, etm_Attr_v, etm_AttrData, AttrDataGraph, etm_AttrDataGraph)
__flatbuffers_build_union_table_value_field(flatbuffers_, etm_Attr_v, etm_AttrData, AttrDataFloats, etm_AttrDataFloats)
__flatbuffers_build_union_table_value_field(flatbuffers_, etm_Attr_v, etm_AttrData, AttrDataInts, etm_AttrDataInts)
__flatbuffers_build_union_table_value_field(flatbuffers_, etm_Attr_v, etm_AttrData, AttrDataBytes, etm_AttrDataBytes)
__flatbuffers_build_union_table_value_field(flatbuffers_, etm_Attr_v, etm_AttrData, AttrDataTensors, etm_AttrDataTensors)
__flatbuffers_build_union_table_value_field(flatbuffers_, etm_Attr_v, etm_AttrData, AttrDataGraphs, etm_AttrDataGraphs)

static inline etm_Attr_ref_t etm_Attr_create(flatbuffers_builder_t *B __etm_Attr_formal_args)
{
    if (etm_Attr_start(B)
        || etm_Attr_k_add(B, v0)
        || etm_Attr_v_add_value(B, v2)
        || etm_Attr_v_add_type(B, v2.type)) {
        return 0;
    }
    return etm_Attr_end(B);
}

static etm_Attr_ref_t etm_Attr_clone(flatbuffers_builder_t *B, etm_Attr_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (etm_Attr_start(B)
        || etm_Attr_k_pick(B, t)
        || etm_Attr_v_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, etm_Attr_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, etm_Node_name, etm_Node)
__flatbuffers_build_vector_field(1, flatbuffers_, etm_Node_in, flatbuffers_uint16, uint16_t, etm_Node)
__flatbuffers_build_vector_field(2, flatbuffers_, etm_Node_out, flatbuffers_uint16, uint16_t, etm_Node)
__flatbuffers_build_scalar_field(3, flatbuffers_, etm_Node_optype, etm_OpType, etm_OpType_enum_t, 4, 4, INT32_C(0), etm_Node)
__flatbuffers_build_table_vector_field(4, flatbuffers_, etm_Node_attrs, etm_Attr, etm_Node)

static inline etm_Node_ref_t etm_Node_create(flatbuffers_builder_t *B __etm_Node_formal_args)
{
    if (etm_Node_start(B)
        || etm_Node_name_add(B, v0)
        || etm_Node_in_add(B, v1)
        || etm_Node_out_add(B, v2)
        || etm_Node_optype_add(B, v3)
        || etm_Node_attrs_add(B, v4)) {
        return 0;
    }
    return etm_Node_end(B);
}

static etm_Node_ref_t etm_Node_clone(flatbuffers_builder_t *B, etm_Node_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (etm_Node_start(B)
        || etm_Node_name_pick(B, t)
        || etm_Node_in_pick(B, t)
        || etm_Node_out_pick(B, t)
        || etm_Node_optype_pick(B, t)
        || etm_Node_attrs_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, etm_Node_end(B));
}

__flatbuffers_build_table_vector_field(0, flatbuffers_, etm_Graph_tensors, etm_Tensor, etm_Graph)
__flatbuffers_build_table_vector_field(1, flatbuffers_, etm_Graph_nodes, etm_Node, etm_Graph)
__flatbuffers_build_scalar_field(2, flatbuffers_, etm_Graph_layout, flatbuffers_uint8, uint8_t, 1, 1, UINT8_C(0), etm_Graph)
__flatbuffers_build_vector_field(3, flatbuffers_, etm_Graph_in, flatbuffers_uint16, uint16_t, etm_Graph)
__flatbuffers_build_vector_field(4, flatbuffers_, etm_Graph_out, flatbuffers_uint16, uint16_t, etm_Graph)

static inline etm_Graph_ref_t etm_Graph_create(flatbuffers_builder_t *B __etm_Graph_formal_args)
{
    if (etm_Graph_start(B)
        || etm_Graph_tensors_add(B, v0)
        || etm_Graph_nodes_add(B, v1)
        || etm_Graph_in_add(B, v3)
        || etm_Graph_out_add(B, v4)
        || etm_Graph_layout_add(B, v2)) {
        return 0;
    }
    return etm_Graph_end(B);
}

static etm_Graph_ref_t etm_Graph_clone(flatbuffers_builder_t *B, etm_Graph_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (etm_Graph_start(B)
        || etm_Graph_tensors_pick(B, t)
        || etm_Graph_nodes_pick(B, t)
        || etm_Graph_in_pick(B, t)
        || etm_Graph_out_pick(B, t)
        || etm_Graph_layout_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, etm_Graph_end(B));
}

__flatbuffers_build_string_field(0, flatbuffers_, etm_Model_name, etm_Model)
__flatbuffers_build_table_vector_field(1, flatbuffers_, etm_Model_graphs, etm_Graph, etm_Model)

static inline etm_Model_ref_t etm_Model_create(flatbuffers_builder_t *B __etm_Model_formal_args)
{
    if (etm_Model_start(B)
        || etm_Model_name_add(B, v0)
        || etm_Model_graphs_add(B, v1)) {
        return 0;
    }
    return etm_Model_end(B);
}

static etm_Model_ref_t etm_Model_clone(flatbuffers_builder_t *B, etm_Model_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (etm_Model_start(B)
        || etm_Model_name_pick(B, t)
        || etm_Model_graphs_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, etm_Model_end(B));
}

#include "../flatcc/flatcc_epilogue.h"
#endif /* ETM_BUILDER_H */
