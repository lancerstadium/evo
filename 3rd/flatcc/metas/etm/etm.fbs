namespace etm;


// ==================================================================================== //
//                                       etm: tensor
// ==================================================================================== //

enum TensorType: int {
    Undefined = 0,
    Bool = 9,
    Int8 = 3,
    Int16 = 5,
    Int32 = 6,
    Int64 = 7,
    Uint8 = 2,
    Uint16 = 4,
    Uint32 = 12,
    Uint64 = 13,
    Bfloat16 = 16,
    Float16 = 10,
    Float32 = 1,
    Float64 = 11,
    Complex64 = 14,
    Complex128 = 15,
    String = 8,
}

table Tensor {
    type: TensorType;               // Tensor data type
    name: string;                   // Tensor name
    dims: [int];                    // Shape of dim array
    datas: [ubyte];                 // Tensor data addr (byte array to represent raw data)
    ndata: ulong;                   // Tensor data size
    isParam: bool;                  // Tensor is parameter
    layout: ubyte;                  // Tensor is layout 0NCHW/1NHWC
}


// ==================================================================================== //
//                                       etm: attribute
// ==================================================================================== //

table AttrDataFloat {
    f: float;                           // When type is Float
}
table AttrDataInt {
    i: long;                            // When type is Int
}
table AttrDataString {
    s: string;                          // When type is String
}
table AttrDataTensor {
    t: Tensor;                          // When type is Tensor
}
table AttrDataGraph {
    g: Graph;                           // When type is Graph
}
table AttrDataFloats {
    fs: [float];                        // When type is Floats
}
table AttrDataInts {
    is: [long];                         // When type is Ints
}
table AttrDataBytes {
    is: [ubyte];                        // When type is Bytes
}
table AttrDataTensors {
    ts: [Tensor];                       // When type is Tensors
}
table AttrDataGraphs {
    gs: [Graph];                        // When type is Graphs
}
union AttrData {
    AttrDataFloat,
    AttrDataInt,
    AttrDataString,
    AttrDataTensor,
    AttrDataGraph,
    AttrDataFloats,
    AttrDataInts,
    AttrDataBytes,
    AttrDataTensors,
    AttrDataGraphs
}
table Attr {
    k: string;
    v: AttrData;
}


// ==================================================================================== //
//                                       etm: Operator Type
// ==================================================================================== //

enum OpType: int {
    Nop,
    Abs,
    Acos,
    Acosh,
    Add,
    And,
    ArgMax,
    ArgMin,
    Asin,
    Asinh,
    Atan,
    Atanh,
    AveragePool,
    BatchNormalization,
    BitShift,
    Cast,
    Ceil,
    Clip,
    Compress,
    Concat,
    ConcatFromSequence,
    Constant,
    ConstantOfShape,
    Conv,
    ConvInteger,
    ConvTranspose,
    Cos,
    Cosh,
    CumSum,
    DepthToSpace,
    DequantizeLinear,
    Det,
    Div,
    Dropout,
    Einsum,
    Elu,
    Equal,
    Erf,
    Exp,
    Expand,
    EyeLike,
    Flatten,
    Floor,
    GRU,
    Gather,
    GatherElements,
    GatherND,
    Gemm,
    GlobalAveragePool,
    GlobalLpPool,
    GlobalMaxPool,
    Greater,
    HardSigmoid,
    Hardmax,
    Identity,
    If,
    InstanceNormalization,
    IsInf,
    IsNaN,
    LRN,
    LSTM,
    LeakyRelu,
    Less,
    Log,
    Loop,
    LpNormalization,
    LpPool,
    MatMul,
    MatMulInteger,
    Max,
    MaxPool,
    MaxRoiPool,
    MaxUnpool,
    Mean,
    Min,
    Mod,
    Mul,
    Multinomial,
    Neg,
    NonMaxSuppression,
    NonZero,
    Not,
    OneHot,
    Or,
    PRelu,
    Pad,
    Pow,
    QLinearConv,
    QLinearMatMul,
    QuantizeLinear,
    RNN,
    RandomNormal,
    RandomNormalLike,
    RandomUniform,
    RandomUniformLike,
    Reciprocal,
    ReduceL1,
    ReduceL2,
    ReduceLogSum,
    ReduceLogSumExp,
    ReduceMax,
    ReduceMean,
    ReduceMin,
    ReduceProd,
    ReduceSum,
    ReduceSumSquare,
    Relu,
    Reshape,
    Resize,
    ReverseSequence,
    RoiAlign,
    Round,
    Scan,
    Scatter,
    ScatterElements,
    ScatterND,
    Selu,
    SequenceAt,
    SequenceConstruct,
    SequenceEmpty,
    SequenceErase,
    SequenceInsert,
    SequenceLength,
    Shape,
    Shrink,
    Sigmoid,
    Sign,
    Sin,
    Sinh,
    Size,
    Slice,
    Softplus,
    Softsign,
    SpaceToDepth,
    Split,
    SplitToSequence,
    Sqrt,
    Squeeze,
    StringNormalizer,
    Sub,
    Sum,
    Tan,
    Tanh,
    TfIdfVectorizer,
    ThresholdedRelu,
    Tile,
    TopK,
    Transpose,
    Unique,
    Unsqueeze,
    Upsample,
    Where,
    Xor,
    Celu,
    DynamicQuantizeLinear,
    GreaterOrEqual,
    LessOrEqual,
    LogSoftmax,
    MeanVarianceNormalization,
    NegativeLogLikelihoodLoss,
    Range,
    Softmax,
    SoftmaxCrossEntropyLoss,
    // Add more
}

// ==================================================================================== //
//                                       etm: Node
// ==================================================================================== //


table Node {
    name: string;                       // Node name

    in: [ushort];                       // Input Tensor List
    out: [ushort];                      // Output Tensor List

    optype: OpType;                     // Operator
    attrs: [Attr];                      // Attr Vec of node
}


// ==================================================================================== //
//                                       etm: Graph
// ==================================================================================== //

table Graph {
    tensors: [Tensor];                  // Graph tensors list
    nodes: [Node];                      // Graph nodes list

    layout: ubyte;                      // Data layout: 0NCHW/1NHWC
    in: [ushort];                       // Input tensors index Vector
    out: [ushort];                      // Output tensors index Vector
}

// ==================================================================================== //
//                                       etm: Model
// ==================================================================================== //

// Evo Tiny Model
table Model {
    name: string;                       // Name of Model
    graphs: [Graph];                    // Vector of sub graphs
}

root_type Model;
