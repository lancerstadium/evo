#ifndef ETM_JSON_PARSER_H
#define ETM_JSON_PARSER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_parser.h"
#include "flatcc/flatcc_prologue.h"

/*
 * Parses the default root table or struct of the schema and constructs a FlatBuffer.
 *
 * Builder `B` must be initialized. `ctx` can be null but will hold
 * hold detailed error info on return when available.
 * Returns 0 on success, or error code.
 * `flags` : 0 by default, `flatcc_json_parser_f_skip_unknown` silently
 * ignores unknown table and structs fields, and union types.
 */
static int etm_parse_json(flatcc_builder_t *B, flatcc_json_parser_t *ctx,
        const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags);

static const char *etm_TensorType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *etm_Tensor_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *etm_AttributeType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *etm_Attribute_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *etm_NodeType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *etm_Node_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *etm_GraphInfo_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int etm_GraphInfo_json_union_accept_type(uint8_t type);
static const char *etm_GraphInfo_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *etm_PGraphInfo_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *etm_SGraphInfo_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *etm_Graph_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *etm_OpType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *etm_Op_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *etm_Model_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *etm_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *etm_local_etm_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *etm_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);

static const char *etm_TensorType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x496e743332000000) { /* branch "Int32" */
        if (w < 0x436f6d706c657836) { /* branch "Complex6" */
            if (w < 0x426f6f6c00000000) { /* branch "Bool" */
                if (w == 0x42666c6f61743136) { /* "Bfloat16" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(16), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "Bfloat16" */
                    return unmatched;
                } /* "Bfloat16" */
            } else { /* branch "Bool" */
                if ((w & 0xffffffff00000000) == 0x426f6f6c00000000) { /* "Bool" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(9), *value_sign = 0;
                    } else {
                        goto pfguard1;
                    }
                } else { /* "Bool" */
                    goto pfguard1;
                } /* "Bool" */
                goto endpfguard1;
pfguard1:
                if (w == 0x436f6d706c657831) { /* descend "Complex1" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffff000000000000) == 0x3238000000000000) { /* "28" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(15), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "28" */
                        return unmatched;
                    } /* "28" */
                } else { /* descend "Complex1" */
                    return unmatched;
                } /* descend "Complex1" */
endpfguard1:
                (void)0;
            } /* branch "Bool" */
        } else { /* branch "Complex6" */
            if (w < 0x466c6f6174333200) { /* branch "Float32" */
                if (w == 0x436f6d706c657836) { /* descend "Complex6" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x3400000000000000) { /* "4" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(14), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "4" */
                        return unmatched;
                    } /* "4" */
                } else { /* descend "Complex6" */
                    if ((w & 0xffffffffffffff00) == 0x466c6f6174313600) { /* "Float16" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(10), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "Float16" */
                        return unmatched;
                    } /* "Float16" */
                } /* descend "Complex6" */
            } else { /* branch "Float32" */
                if (w < 0x466c6f6174363400) { /* branch "Float64" */
                    if ((w & 0xffffffffffffff00) == 0x466c6f6174333200) { /* "Float32" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(1), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "Float32" */
                        return unmatched;
                    } /* "Float32" */
                } else { /* branch "Float64" */
                    if ((w & 0xffffffffff000000) == 0x496e743136000000) { /* "Int16" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(5), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "Int16" */
                        if ((w & 0xffffffffffffff00) == 0x466c6f6174363400) { /* "Float64" */
                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                            if (buf != mark) {
                                *value = UINT64_C(11), *value_sign = 0;
                            } else {
                                return unmatched;
                            }
                        } else { /* "Float64" */
                            return unmatched;
                        } /* "Float64" */
                    } /* "Int16" */
                } /* branch "Float64" */
            } /* branch "Float32" */
        } /* branch "Complex6" */
    } else { /* branch "Int32" */
        if (w < 0x55696e7431360000) { /* branch "Uint16" */
            if (w < 0x496e743634000000) { /* branch "Int64" */
                if ((w & 0xffffffffff000000) == 0x496e743332000000) { /* "Int32" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(6), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "Int32" */
                    return unmatched;
                } /* "Int32" */
            } else { /* branch "Int64" */
                if (w < 0x496e743800000000) { /* branch "Int8" */
                    if ((w & 0xffffffffff000000) == 0x496e743634000000) { /* "Int64" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(7), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "Int64" */
                        return unmatched;
                    } /* "Int64" */
                } else { /* branch "Int8" */
                    if ((w & 0xffffffffffff0000) == 0x537472696e670000) { /* "String" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(8), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "String" */
                        if ((w & 0xffffffff00000000) == 0x496e743800000000) { /* "Int8" */
                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                            if (buf != mark) {
                                *value = UINT64_C(3), *value_sign = 0;
                            } else {
                                return unmatched;
                            }
                        } else { /* "Int8" */
                            return unmatched;
                        } /* "Int8" */
                    } /* "String" */
                } /* branch "Int8" */
            } /* branch "Int64" */
        } else { /* branch "Uint16" */
            if (w < 0x55696e7436340000) { /* branch "Uint64" */
                if ((w & 0xffffffffffff0000) == 0x55696e7433320000) { /* "Uint32" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(12), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "Uint32" */
                    if ((w & 0xffffffffffff0000) == 0x55696e7431360000) { /* "Uint16" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(4), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "Uint16" */
                        return unmatched;
                    } /* "Uint16" */
                } /* "Uint32" */
            } else { /* branch "Uint64" */
                if (w < 0x55696e7438000000) { /* branch "Uint8" */
                    if ((w & 0xffffffffffff0000) == 0x55696e7436340000) { /* "Uint64" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(13), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "Uint64" */
                        return unmatched;
                    } /* "Uint64" */
                } else { /* branch "Uint8" */
                    if ((w & 0xffffffffff000000) == 0x55696e7438000000) { /* "Uint8" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(2), *value_sign = 0;
                        } else {
                            goto pfguard2;
                        }
                    } else { /* "Uint8" */
                        goto pfguard2;
                    } /* "Uint8" */
                    goto endpfguard2;
pfguard2:
                    if (w == 0x556e646566696e65) { /* descend "Undefine" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xff00000000000000) == 0x6400000000000000) { /* "d" */
                            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                            if (buf != mark) {
                                *value = UINT64_C(0), *value_sign = 0;
                            } else {
                                return unmatched;
                            }
                        } else { /* "d" */
                            return unmatched;
                        } /* "d" */
                    } else { /* descend "Undefine" */
                        return unmatched;
                    } /* descend "Undefine" */
endpfguard2:
                    (void)0;
                } /* branch "Uint8" */
            } /* branch "Uint64" */
        } /* branch "Uint16" */
    } /* branch "Int32" */
    return buf;
}

static const char *etm_Tensor_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 15)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6973526573686170) { /* branch "isReshap" */
            if (w < 0x6973436f6e737461) { /* branch "isConsta" */
                if (w < 0x64696d7300000000) { /* branch "dims" */
                    if ((w & 0xffffffffff000000) == 0x6461746173000000) { /* "datas" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            if (flatcc_builder_start_vector(ctx->ctx, 1, 1, UINT64_C(4294967295))) goto failed;
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                uint8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        etm_local_etm_json_parser_enum,
                                        etm_global_json_parser_enum, 0 };
                                if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                flatbuffers_uint8_write_to_pe(pval, val);
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            ref = flatcc_builder_end_vector(ctx->ctx);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 4))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "datas" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "datas" */
                } else { /* branch "dims" */
                    if ((w & 0xffffffffff000000) == 0x696e646578000000) { /* "index" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    etm_local_etm_json_parser_enum,
                                    etm_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "index" */
                        if ((w & 0xffffffff00000000) == 0x64696d7300000000) { /* "dims" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                            if (mark != buf) {
                                if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    int32_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            etm_local_etm_json_parser_enum,
                                            etm_global_json_parser_enum, 0 };
                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    flatbuffers_int32_write_to_pe(pval, val);
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 3))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "dims" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "dims" */
                    } /* "index" */
                } /* branch "dims" */
            } else { /* branch "isConsta" */
                if (w < 0x697349616c6c6f63) { /* branch "isIalloc" */
                    if (w == 0x6973436f6e737461) { /* descend "isConsta" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffff000000000000) == 0x6e74000000000000) { /* "nt" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                            if (mark != buf) {
                                uint8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        etm_local_etm_json_parser_enum,
                                        etm_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != UINT8_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 10, 1, 1))) goto failed;
                                    flatbuffers_bool_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "nt" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "nt" */
                    } else { /* descend "isConsta" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "isConsta" */
                } else { /* branch "isIalloc" */
                    if (w < 0x6973496e70757400) { /* branch "isInput" */
                        if (w == 0x697349616c6c6f63) { /* descend "isIalloc" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffff00000000) == 0x6174656400000000) { /* "ated" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                                if (mark != buf) {
                                    uint8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            etm_local_etm_json_parser_enum,
                                            etm_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != UINT8_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 13, 1, 1))) goto failed;
                                        flatbuffers_bool_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "ated" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "ated" */
                        } else { /* descend "isIalloc" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "isIalloc" */
                    } else { /* branch "isInput" */
                        if (w == 0x69734f7574707574) { /* "isOutput" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                            if (mark != buf) {
                                uint8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        etm_local_etm_json_parser_enum,
                                        etm_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != UINT8_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 12, 1, 1))) goto failed;
                                    flatbuffers_bool_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "isOutput" */
                            if ((w & 0xffffffffffffff00) == 0x6973496e70757400) { /* "isInput" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                                if (mark != buf) {
                                    uint8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            etm_local_etm_json_parser_enum,
                                            etm_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != UINT8_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 11, 1, 1))) goto failed;
                                        flatbuffers_bool_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "isInput" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "isInput" */
                        } /* "isOutput" */
                    } /* branch "isInput" */
                } /* branch "isIalloc" */
            } /* branch "isConsta" */
        } else { /* branch "isReshap" */
            if (w < 0x6e616d6500000000) { /* branch "name" */
                if (w < 0x6c61796f75740000) { /* branch "layout" */
                    if (w == 0x6973526573686170) { /* descend "isReshap" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffff000000000000) == 0x6564000000000000) { /* "ed" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                            if (mark != buf) {
                                uint8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        etm_local_etm_json_parser_enum,
                                        etm_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != UINT8_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 9, 1, 1))) goto failed;
                                    flatbuffers_bool_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "ed" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "ed" */
                    } else { /* descend "isReshap" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "isReshap" */
                } else { /* branch "layout" */
                    if ((w & 0xffffffffff000000) == 0x6e456c656d000000) { /* "nElem" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            uint32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    etm_local_etm_json_parser_enum,
                                    etm_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != UINT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 7, 4, 4))) goto failed;
                                flatbuffers_uint32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "nElem" */
                        if ((w & 0xffffffffffff0000) == 0x6c61796f75740000) { /* "layout" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                            if (mark != buf) {
                                uint16_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        etm_local_etm_json_parser_enum,
                                        etm_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != UINT16_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 14, 2, 2))) goto failed;
                                    flatbuffers_uint16_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "layout" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "layout" */
                    } /* "nElem" */
                } /* branch "layout" */
            } else { /* branch "name" */
                if (w < 0x704e6f6465000000) { /* branch "pNode" */
                    if ((w & 0xffffffffff000000) == 0x6e64617461000000) { /* "ndata" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            uint64_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    etm_local_etm_json_parser_enum,
                                    etm_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != UINT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 5, 8, 8))) goto failed;
                                flatbuffers_uint64_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "ndata" */
                        if ((w & 0xffffffff00000000) == 0x6e616d6500000000) { /* "name" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                            if (mark != buf) {
                                buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "name" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "name" */
                    } /* "ndata" */
                } else { /* branch "pNode" */
                    if (w < 0x737a456c656d0000) { /* branch "szElem" */
                        if ((w & 0xffffffffff000000) == 0x704e6f6465000000) { /* "pNode" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                            if (mark != buf) {
                                int16_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        etm_local_etm_json_parser_enum,
                                        etm_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_int16(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != INT16_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 8, 2, 2))) goto failed;
                                    flatbuffers_int16_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "pNode" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "pNode" */
                    } else { /* branch "szElem" */
                        if ((w & 0xffffffff00000000) == 0x7479706500000000) { /* "type" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                            if (mark != buf) {
                                int32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        etm_TensorType_parse_json_enum,
                                        etm_local_etm_json_parser_enum,
                                        etm_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                                    flatbuffers_int32_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "type" */
                            if ((w & 0xffffffffffff0000) == 0x737a456c656d0000) { /* "szElem" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                                if (mark != buf) {
                                    uint8_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            etm_local_etm_json_parser_enum,
                                            etm_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != UINT8_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 6, 1, 1))) goto failed;
                                        flatbuffers_uint8_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "szElem" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "szElem" */
                        } /* "type" */
                    } /* branch "szElem" */
                } /* branch "pNode" */
            } /* branch "name" */
        } /* branch "isReshap" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int etm_Tensor_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, etm_Tensor_parse_json_table);
}

static const char *etm_AttributeType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x496e740000000000) { /* branch "Int" */
        if ((w & 0xffffffffffff0000) == 0x466c6f6174730000) { /* "Floats" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
            if (buf != mark) {
                *value = UINT64_C(5), *value_sign = 0;
            } else {
                goto pfguard1;
            }
        } else { /* "Floats" */
            if ((w & 0xffffffffff000000) == 0x466c6f6174000000) { /* "Float" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(0), *value_sign = 0;
                } else {
                    goto pfguard1;
                }
            } else { /* "Float" */
                goto pfguard1;
            } /* "Float" */
        } /* "Floats" */
        goto endpfguard1;
pfguard1:
        if ((w & 0xffffffffffff0000) == 0x4772617068730000) { /* "Graphs" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
            if (buf != mark) {
                *value = UINT64_C(8), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "Graphs" */
            if ((w & 0xffffffffff000000) == 0x4772617068000000) { /* "Graph" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(4), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "Graph" */
                return unmatched;
            } /* "Graph" */
        } /* "Graphs" */
endpfguard1:
        (void)0;
    } else { /* branch "Int" */
        if (w < 0x537472696e670000) { /* branch "String" */
            if ((w & 0xffffffffffff0000) == 0x496e743634730000) { /* "Int64s" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(6), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "Int64s" */
                if ((w & 0xffffff0000000000) == 0x496e740000000000) { /* "Int" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(1), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "Int" */
                    return unmatched;
                } /* "Int" */
            } /* "Int64s" */
        } else { /* branch "String" */
            if (w < 0x54656e736f720000) { /* branch "Tensor" */
                if ((w & 0xffffffffffff0000) == 0x537472696e670000) { /* "String" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(2), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "String" */
                    return unmatched;
                } /* "String" */
            } else { /* branch "Tensor" */
                if ((w & 0xffffffffffffff00) == 0x54656e736f727300) { /* "Tensors" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(7), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "Tensors" */
                    if ((w & 0xffffffffffff0000) == 0x54656e736f720000) { /* "Tensor" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(3), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "Tensor" */
                        return unmatched;
                    } /* "Tensor" */
                } /* "Tensors" */
            } /* branch "Tensor" */
        } /* branch "String" */
    } /* branch "Int" */
    return buf;
}

static const char *etm_Attribute_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 11)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6900000000000000) { /* branch "i" */
            if ((w & 0xffff000000000000) == 0x6673000000000000) { /* "fs" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                if (mark != buf) {
                    if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                    while (more) {
                        float val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                etm_local_etm_json_parser_enum,
                                etm_global_json_parser_enum, 0 };
                        if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                        buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        flatbuffers_float_write_to_pe(pval, val);
                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                    }
                    ref = flatcc_builder_end_vector(ctx->ctx);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 7))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "fs" */
                if ((w & 0xff00000000000000) == 0x6600000000000000) { /* "f" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                    if (mark != buf) {
                        float val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                etm_local_etm_json_parser_enum,
                                etm_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_float(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_float(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != 0.00000000f || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                            flatbuffers_float_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "f" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "f" */
            } /* "fs" */
        } else { /* branch "i" */
            if (w < 0x6e616d6500000000) { /* branch "name" */
                if ((w & 0xffff000000000000) == 0x6973000000000000) { /* "is" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                    if (mark != buf) {
                        if (flatcc_builder_start_vector(ctx->ctx, 8, 8, UINT64_C(536870911))) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            int64_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    etm_local_etm_json_parser_enum,
                                    etm_global_json_parser_enum, 0 };
                            if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                            buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            flatbuffers_int64_write_to_pe(pval, val);
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 8))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "is" */
                    if ((w & 0xff00000000000000) == 0x6900000000000000) { /* "i" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            int64_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    etm_local_etm_json_parser_enum,
                                    etm_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int64(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != INT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 8, 8))) goto failed;
                                flatbuffers_int64_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "i" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "i" */
                } /* "is" */
            } else { /* branch "name" */
                if (w < 0x7300000000000000) { /* branch "s" */
                    if ((w & 0xffffffff00000000) == 0x6e616d6500000000) { /* "name" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                        if (mark != buf) {
                            buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "name" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "name" */
                } else { /* branch "s" */
                    if ((w & 0xffffffff00000000) == 0x7479706500000000) { /* "type" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    etm_AttributeType_parse_json_enum,
                                    etm_local_etm_json_parser_enum,
                                    etm_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "type" */
                        if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                            if (mark != buf) {
                                buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 4))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "s" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "s" */
                    } /* "type" */
                } /* branch "s" */
            } /* branch "name" */
        } /* branch "i" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int etm_Attribute_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, etm_Attribute_parse_json_table);
}

static const char *etm_NodeType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x48696464656e0000) { /* branch "Hidden" */
        if ((w & 0xffffffffffffff00) == 0x47656e6572696300) { /* "Generic" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 7, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "Generic" */
            return unmatched;
        } /* "Generic" */
    } else { /* branch "Hidden" */
        if (w < 0x496e707574000000) { /* branch "Input" */
            if ((w & 0xffffffffffff0000) == 0x48696464656e0000) { /* "Hidden" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(3), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "Hidden" */
                return unmatched;
            } /* "Hidden" */
        } else { /* branch "Input" */
            if ((w & 0xffffffffffff0000) == 0x4f75747075740000) { /* "Output" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(2), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "Output" */
                if ((w & 0xffffffffff000000) == 0x496e707574000000) { /* "Input" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 5, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(1), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "Input" */
                    return unmatched;
                } /* "Input" */
            } /* "Output" */
        } /* branch "Input" */
    } /* branch "Hidden" */
    return buf;
}

static const char *etm_Node_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 8)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x696e646578000000) { /* branch "index" */
            if ((w & 0xffffffffffffff00) == 0x6174747256656300) { /* "attrVec" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                if (mark != buf) {
                    if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                    while (more) {
                        buf = etm_Attribute_parse_json_table(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                    }
                    ref = flatcc_builder_end_offset_vector(ctx->ctx);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 7))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "attrVec" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "attrVec" */
        } else { /* branch "index" */
            if (w < 0x6e616d6500000000) { /* branch "name" */
                if ((w & 0xffffffffff000000) == 0x696e646578000000) { /* "index" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        uint16_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                etm_local_etm_json_parser_enum,
                                etm_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != UINT16_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 2, 2))) goto failed;
                            flatbuffers_uint16_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "index" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "index" */
            } else { /* branch "name" */
                if ((w & 0xffffffff00000000) == 0x7479706500000000) { /* "type" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                etm_NodeType_parse_json_enum,
                                etm_local_etm_json_parser_enum,
                                etm_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "type" */
                    if ((w & 0xffffffff00000000) == 0x6e616d6500000000) { /* "name" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                        if (mark != buf) {
                            buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "name" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "name" */
                } /* "type" */
            } /* branch "name" */
        } /* branch "index" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int etm_Node_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, etm_Node_parse_json_table);
}

static const char *etm_GraphInfo_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* PGraphInfo */
        buf = etm_PGraphInfo_parse_json_table(ctx, buf, end, result);
        break;
    case 2: /* SGraphInfo */
        buf = etm_SGraphInfo_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int etm_GraphInfo_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* PGraphInfo */
    case 2: return 1; /* SGraphInfo */
    default: return 0;
    }
}

static const char *etm_GraphInfo_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x504772617068496e) { /* branch "PGraphIn" */
        if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(0), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "NONE" */
            return unmatched;
        } /* "NONE" */
    } else { /* branch "PGraphIn" */
        if (w == 0x504772617068496e) { /* descend "PGraphIn" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffff000000000000) == 0x666f000000000000) { /* "fo" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(1), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "fo" */
                return unmatched;
            } /* "fo" */
        } else { /* descend "PGraphIn" */
            if (w == 0x534772617068496e) { /* descend "SGraphIn" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffff000000000000) == 0x666f000000000000) { /* "fo" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(2), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "fo" */
                    return unmatched;
                } /* "fo" */
            } else { /* descend "SGraphIn" */
                return unmatched;
            } /* descend "SGraphIn" */
        } /* descend "PGraphIn" */
    } /* branch "PGraphIn" */
    return buf;
}

static const char *etm_PGraphInfo_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 5)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6e6f75747075744e) { /* branch "noutputN" */
            if (w == 0x696e707574496e6f) { /* descend "inputIno" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffffff0000) == 0x6465735665630000) { /* "desVec" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                    if (mark != buf) {
                        if (flatcc_builder_start_vector(ctx->ctx, 2, 2, UINT64_C(2147483647))) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            uint16_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    etm_local_etm_json_parser_enum,
                                    etm_global_json_parser_enum, 0 };
                            if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                            buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            flatbuffers_uint16_write_to_pe(pval, val);
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "desVec" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "desVec" */
            } else { /* descend "inputIno" */
                if (w == 0x6e696e7075744e6f) { /* descend "ninputNo" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffff000000000000) == 0x6465000000000000) { /* "de" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                        if (mark != buf) {
                            uint16_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    etm_local_etm_json_parser_enum,
                                    etm_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != UINT16_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 2, 2))) goto failed;
                                flatbuffers_uint16_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "de" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "de" */
                } else { /* descend "ninputNo" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "ninputNo" */
            } /* descend "inputIno" */
        } else { /* branch "noutputN" */
            if (w < 0x6f7574707574496e) { /* branch "outputIn" */
                if (w == 0x6e6f75747075744e) { /* descend "noutputN" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffff0000000000) == 0x6f64650000000000) { /* "ode" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                        if (mark != buf) {
                            uint16_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    etm_local_etm_json_parser_enum,
                                    etm_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != UINT16_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 4, 2, 2))) goto failed;
                                flatbuffers_uint16_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "ode" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "ode" */
                } else { /* descend "noutputN" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "noutputN" */
            } else { /* branch "outputIn" */
                if (w == 0x6f7574707574496e) { /* descend "outputIn" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffffffff00) == 0x6f64657356656300) { /* "odesVec" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                        if (mark != buf) {
                            if (flatcc_builder_start_vector(ctx->ctx, 2, 2, UINT64_C(2147483647))) goto failed;
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                uint16_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        etm_local_etm_json_parser_enum,
                                        etm_global_json_parser_enum, 0 };
                                if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                flatbuffers_uint16_write_to_pe(pval, val);
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            ref = flatcc_builder_end_vector(ctx->ctx);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "odesVec" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "odesVec" */
                } else { /* descend "outputIn" */
                    if ((w & 0xffffffffffff0000) == 0x7375625665630000) { /* "subVec" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                        if (mark != buf) {
                            if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                buf = etm_Graph_parse_json_table(ctx, buf, end, &ref);
                                if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                                *pref = ref;
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            ref = flatcc_builder_end_offset_vector(ctx->ctx);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "subVec" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "subVec" */
                } /* descend "outputIn" */
            } /* branch "outputIn" */
        } /* branch "noutputN" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int etm_PGraphInfo_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, etm_PGraphInfo_parse_json_table);
}

static const char *etm_SGraphInfo_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 5)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x696e707574497465) { /* branch "inputIte" */
            if ((w & 0xffffff0000000000) == 0x6964780000000000) { /* "idx" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            etm_local_etm_json_parser_enum,
                            etm_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "idx" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "idx" */
        } else { /* branch "inputIte" */
            if (w < 0x6e6f646573566563) { /* branch "nodesVec" */
                if (w == 0x696e707574497465) { /* descend "inputIte" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x6e736f7273566563) { /* "nsorsVec" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                        if (mark != buf) {
                            if (flatcc_builder_start_vector(ctx->ctx, 2, 2, UINT64_C(2147483647))) goto failed;
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                uint16_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        etm_local_etm_json_parser_enum,
                                        etm_global_json_parser_enum, 0 };
                                if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                flatbuffers_uint16_write_to_pe(pval, val);
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            ref = flatcc_builder_end_vector(ctx->ctx);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "nsorsVec" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "nsorsVec" */
                } else { /* descend "inputIte" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "inputIte" */
            } else { /* branch "nodesVec" */
                if (w == 0x6e6f646573566563) { /* "nodesVec" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                    if (mark != buf) {
                        if (flatcc_builder_start_vector(ctx->ctx, 2, 2, UINT64_C(2147483647))) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            uint16_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    etm_local_etm_json_parser_enum,
                                    etm_global_json_parser_enum, 0 };
                            if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                            buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            flatbuffers_uint16_write_to_pe(pval, val);
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                    } else {
                        goto pfguard1;
                    }
                } else { /* "nodesVec" */
                    goto pfguard1;
                } /* "nodesVec" */
                goto endpfguard1;
pfguard1:
                if (w == 0x6f75747075744974) { /* descend "outputIt" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x656e736f72735665) { /* descend "ensorsVe" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xff00000000000000) == 0x6300000000000000) { /* "c" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                            if (mark != buf) {
                                if (flatcc_builder_start_vector(ctx->ctx, 2, 2, UINT64_C(2147483647))) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    uint16_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            etm_local_etm_json_parser_enum,
                                            etm_global_json_parser_enum, 0 };
                                    if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                    buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    flatbuffers_uint16_write_to_pe(pval, val);
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 3))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "c" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "c" */
                    } else { /* descend "ensorsVe" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "ensorsVe" */
                } else { /* descend "outputIt" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "outputIt" */
endpfguard1:
                (void)0;
            } /* branch "nodesVec" */
        } /* branch "inputIte" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int etm_SGraphInfo_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, etm_SGraphInfo_parse_json_table);
}

static const char *etm_Graph_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 6)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6d6f726500000000) { /* branch "more" */
            if (w == 0x646174614c61796f) { /* descend "dataLayo" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffff000000000000) == 0x7574000000000000) { /* "ut" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                    if (mark != buf) {
                        uint16_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                etm_local_etm_json_parser_enum,
                                etm_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_uint16(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_uint16(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != UINT16_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 2, 2))) goto failed;
                            flatbuffers_uint16_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "ut" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "ut" */
            } else { /* descend "dataLayo" */
                if ((w & 0xffffffffff000000) == 0x6973537562000000) { /* "isSub" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        uint8_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                etm_local_etm_json_parser_enum,
                                etm_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_bool(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_bool(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != UINT8_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 1, 1))) goto failed;
                            flatbuffers_bool_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "isSub" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "isSub" */
            } /* descend "dataLayo" */
        } else { /* branch "more" */
            if (w == 0x6d6f72655f747970) { /* descend "more_typ" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                    if (mark != buf) {
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                etm_GraphInfo_parse_json_enum,
                                etm_local_etm_json_parser_enum,
                                etm_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_union_type(ctx, buf, end, 0, 5, h_unions, symbolic_parsers, etm_GraphInfo_parse_json_union);
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "e" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "e" */
            } else { /* descend "more_typ" */
                if ((w & 0xffffffff00000000) == 0x6d6f726500000000) { /* "more" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        buf = flatcc_json_parser_union(ctx, buf, end, 0, 5, h_unions, etm_GraphInfo_parse_json_union);
                    } else {
                        goto pfguard1;
                    }
                } else { /* "more" */
                    goto pfguard1;
                } /* "more" */
                goto endpfguard1;
pfguard1:
                if ((w & 0xffffffffffffff00) == 0x74656e736f727300) { /* "tensors" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                    if (mark != buf) {
                        if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            buf = etm_Tensor_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_offset_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "tensors" */
                    if ((w & 0xffffffffff000000) == 0x6e6f646573000000) { /* "nodes" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                buf = etm_Node_parse_json_table(ctx, buf, end, &ref);
                                if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                                *pref = ref;
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            ref = flatcc_builder_end_offset_vector(ctx->ctx);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "nodes" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "nodes" */
                } /* "tensors" */
endpfguard1:
                (void)0;
            } /* descend "more_typ" */
        } /* branch "more" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int etm_Graph_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, etm_Graph_parse_json_table);
}

static const char *etm_OpType_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x506f6f6c00000000) { /* branch "Pool" */
        if ((w & 0xffffffff00000000) == 0x436f6e7600000000) { /* "Conv" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(1), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "Conv" */
            return unmatched;
        } /* "Conv" */
    } else { /* branch "Pool" */
        if ((w & 0xffffffff00000000) == 0x506f6f6c00000000) { /* "Pool" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
            if (buf != mark) {
                *value = UINT64_C(2), *value_sign = 0;
            } else {
                goto pfguard1;
            }
        } else { /* "Pool" */
            goto pfguard1;
        } /* "Pool" */
        goto endpfguard1;
pfguard1:
        if (w == 0x556e646566696e65) { /* descend "Undefine" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xff00000000000000) == 0x6400000000000000) { /* "d" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(0), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "d" */
                return unmatched;
            } /* "d" */
        } else { /* descend "Undefine" */
            return unmatched;
        } /* descend "Undefine" */
endpfguard1:
        (void)0;
    } /* branch "Pool" */
    return buf;
}

static const char *etm_Op_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 4)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6e616d6500000000) { /* branch "name" */
            if (w == 0x696e707574496e64) { /* descend "inputInd" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffff00000000) == 0x6578657300000000) { /* "exes" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    etm_local_etm_json_parser_enum,
                                    etm_global_json_parser_enum, 0 };
                            if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            flatbuffers_int32_write_to_pe(pval, val);
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "exes" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "exes" */
            } else { /* descend "inputInd" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "inputInd" */
        } else { /* branch "name" */
            if (w < 0x6f7574707574496e) { /* branch "outputIn" */
                if ((w & 0xffffffff00000000) == 0x6e616d6500000000) { /* "name" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "name" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "name" */
            } else { /* branch "outputIn" */
                if (w == 0x6f7574707574496e) { /* descend "outputIn" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffff00000000) == 0x6465787300000000) { /* "dexs" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                        if (mark != buf) {
                            if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                int32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        etm_local_etm_json_parser_enum,
                                        etm_global_json_parser_enum, 0 };
                                if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                flatbuffers_int32_write_to_pe(pval, val);
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            ref = flatcc_builder_end_vector(ctx->ctx);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 3))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "dexs" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "dexs" */
                } else { /* descend "outputIn" */
                    if ((w & 0xffffffff00000000) == 0x7479706500000000) { /* "type" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                        if (mark != buf) {
                            int32_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    etm_OpType_parse_json_enum,
                                    etm_local_etm_json_parser_enum,
                                    etm_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                                flatbuffers_int32_write_to_pe(pval, val);
                            }
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "type" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "type" */
                } /* descend "outputIn" */
            } /* branch "outputIn" */
        } /* branch "name" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int etm_Op_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, etm_Op_parse_json_table);
}

static const char *etm_Model_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6f706c6973747300) { /* branch "oplists" */
            if ((w & 0xffffffff00000000) == 0x6e616d6500000000) { /* "name" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "name" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "name" */
        } else { /* branch "oplists" */
            if ((w & 0xffffffffffffff00) == 0x6f706c6973747300) { /* "oplists" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                if (mark != buf) {
                    if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                    while (more) {
                        buf = etm_Op_parse_json_table(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                    }
                    ref = flatcc_builder_end_offset_vector(ctx->ctx);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                    *pref = ref;
                } else {
                    goto pfguard1;
                }
            } else { /* "oplists" */
                goto pfguard1;
            } /* "oplists" */
            goto endpfguard1;
pfguard1:
            if (w == 0x74656e736f724e61) { /* descend "tensorNa" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffff000000000000) == 0x6d65000000000000) { /* "me" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                    if (mark != buf) {
                        if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_offset_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "me" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "me" */
            } else { /* descend "tensorNa" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "tensorNa" */
endpfguard1:
            (void)0;
        } /* branch "oplists" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int etm_Model_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, etm_Model_parse_json_table);
}

static const char *etm_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *etm_local_etm_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x4e6f646554797065) { /* branch "NodeType" */
        if (w == 0x4174747269627574) { /* descend "Attribut" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffff000000) == 0x6554797065000000) { /* "eType" */
                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 5);
                if (buf != mark) {
                    buf = etm_AttributeType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                } else {
                    return unmatched;
                }
            } else { /* "eType" */
                return unmatched;
            } /* "eType" */
        } else { /* descend "Attribut" */
            if (w == 0x4772617068496e66) { /* descend "GraphInf" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xff00000000000000) == 0x6f00000000000000) { /* "o" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 1);
                    if (buf != mark) {
                        buf = etm_GraphInfo_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "o" */
                    return unmatched;
                } /* "o" */
            } else { /* descend "GraphInf" */
                return unmatched;
            } /* descend "GraphInf" */
        } /* descend "Attribut" */
    } else { /* branch "NodeType" */
        if (w < 0x4f70547970650000) { /* branch "OpType" */
            if (w == 0x4e6f646554797065) { /* "NodeType" */
                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 8);
                if (buf != mark) {
                    buf = etm_NodeType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                } else {
                    return unmatched;
                }
            } else { /* "NodeType" */
                return unmatched;
            } /* "NodeType" */
        } else { /* branch "OpType" */
            if ((w & 0xffffffffffff0000) == 0x4f70547970650000) { /* "OpType" */
                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                if (buf != mark) {
                    buf = etm_OpType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                } else {
                    goto pfguard1;
                }
            } else { /* "OpType" */
                goto pfguard1;
            } /* "OpType" */
            goto endpfguard1;
pfguard1:
            if (w == 0x54656e736f725479) { /* descend "TensorTy" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffff000000000000) == 0x7065000000000000) { /* "pe" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 2);
                    if (buf != mark) {
                        buf = etm_TensorType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "pe" */
                    return unmatched;
                } /* "pe" */
            } else { /* descend "TensorTy" */
                return unmatched;
            } /* descend "TensorTy" */
endpfguard1:
            (void)0;
        } /* branch "OpType" */
    } /* branch "NodeType" */
    return buf;
}

static const char *etm_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x65746d2e4e6f6465) { /* branch "etm.Node" */
        if (w == 0x65746d2e41747472) { /* descend "etm.Attr" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x6962757465547970) { /* descend "ibuteTyp" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 1);
                    if (buf != mark) {
                        buf = etm_AttributeType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "e" */
                    return unmatched;
                } /* "e" */
            } else { /* descend "ibuteTyp" */
                return unmatched;
            } /* descend "ibuteTyp" */
        } else { /* descend "etm.Attr" */
            if (w == 0x65746d2e47726170) { /* descend "etm.Grap" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffff000000) == 0x68496e666f000000) { /* "hInfo" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 5);
                    if (buf != mark) {
                        buf = etm_GraphInfo_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "hInfo" */
                    return unmatched;
                } /* "hInfo" */
            } else { /* descend "etm.Grap" */
                return unmatched;
            } /* descend "etm.Grap" */
        } /* descend "etm.Attr" */
    } else { /* branch "etm.Node" */
        if (w < 0x65746d2e4f705479) { /* branch "etm.OpTy" */
            if (w == 0x65746d2e4e6f6465) { /* descend "etm.Node" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffff00000000) == 0x5479706500000000) { /* "Type" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 4);
                    if (buf != mark) {
                        buf = etm_NodeType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "Type" */
                    return unmatched;
                } /* "Type" */
            } else { /* descend "etm.Node" */
                return unmatched;
            } /* descend "etm.Node" */
        } else { /* branch "etm.OpTy" */
            if (w == 0x65746d2e4f705479) { /* descend "etm.OpTy" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffff000000000000) == 0x7065000000000000) { /* "pe" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 2);
                    if (buf != mark) {
                        buf = etm_OpType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "pe" */
                    return unmatched;
                } /* "pe" */
            } else { /* descend "etm.OpTy" */
                if (w == 0x65746d2e54656e73) { /* descend "etm.Tens" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffffff0000) == 0x6f72547970650000) { /* "orType" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                        if (buf != mark) {
                            buf = etm_TensorType_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "orType" */
                        return unmatched;
                    } /* "orType" */
                } else { /* descend "etm.Tens" */
                    return unmatched;
                } /* descend "etm.Tens" */
            } /* descend "etm.OpTy" */
        } /* branch "etm.OpTy" */
    } /* branch "etm.Node" */
    return buf;
}

static int etm_parse_json(flatcc_builder_t *B, flatcc_json_parser_t *ctx,
        const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags)
{
    flatcc_json_parser_t parser;
    flatcc_builder_ref_t root;

    ctx = ctx ? ctx : &parser;
    flatcc_json_parser_init(ctx, B, buf, buf + bufsiz, flags);
    if (flatcc_builder_start_buffer(B, 0, 0, 0)) return -1;
    etm_Model_parse_json_table(ctx, buf, buf + bufsiz, &root);
    if (ctx->error) {
        return ctx->error;
    }
    if (!flatcc_builder_end_buffer(B, root)) return -1;
    ctx->end_loc = buf;
    return 0;
}

#include "flatcc/flatcc_epilogue.h"
#endif /* ETM_JSON_PARSER_H */
