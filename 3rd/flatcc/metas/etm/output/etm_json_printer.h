#ifndef ETM_JSON_PRINTER_H
#define ETM_JSON_PRINTER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_printer.h"
#include "flatcc/flatcc_prologue.h"

/*
 * Prints the default root table or struct from a buffer which must have
 * the schema declared file identifier, if any. It is also possible to
 * call the type specific `print_json_as_root` function wich accepts an
 * optional identifier (or 0) as argument. The printer `ctx` object must
 * be initialized with the appropriate output type, or it can be 0 which
 * defaults to stdout. NOTE: `ctx` is not generally allowed to be null, only
 * here for a simplified interface.
 */
static int etm_print_json(flatcc_json_printer_t *ctx, const char *buf, size_t bufsiz);

static void etm_Tensor_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void etm_Attribute_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void etm_Node_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void etm_GraphInfo_print_json_union_type(flatcc_json_printer_t *ctx, flatbuffers_utype_t type);
static void etm_GraphInfo_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_union_descriptor_t *ud);
static void etm_PGraphInfo_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void etm_SGraphInfo_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void etm_Graph_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void etm_Op_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);
static void etm_Model_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td);

static void etm_TensorType_print_json_enum(flatcc_json_printer_t *ctx, int32_t v)
{

    switch (v) {
    case (0): flatcc_json_printer_enum(ctx, "Undefined", 9); break;
    case (9): flatcc_json_printer_enum(ctx, "Bool", 4); break;
    case (3): flatcc_json_printer_enum(ctx, "Int8", 4); break;
    case (5): flatcc_json_printer_enum(ctx, "Int16", 5); break;
    case (6): flatcc_json_printer_enum(ctx, "Int32", 5); break;
    case (7): flatcc_json_printer_enum(ctx, "Int64", 5); break;
    case (2): flatcc_json_printer_enum(ctx, "Uint8", 5); break;
    case (4): flatcc_json_printer_enum(ctx, "Uint16", 6); break;
    case (12): flatcc_json_printer_enum(ctx, "Uint32", 6); break;
    case (13): flatcc_json_printer_enum(ctx, "Uint64", 6); break;
    case (16): flatcc_json_printer_enum(ctx, "Bfloat16", 8); break;
    case (10): flatcc_json_printer_enum(ctx, "Float16", 7); break;
    case (1): flatcc_json_printer_enum(ctx, "Float32", 7); break;
    case (11): flatcc_json_printer_enum(ctx, "Float64", 7); break;
    case (14): flatcc_json_printer_enum(ctx, "Complex64", 9); break;
    case (15): flatcc_json_printer_enum(ctx, "Complex128", 10); break;
    case (8): flatcc_json_printer_enum(ctx, "String", 6); break;
    default: flatcc_json_printer_int32(ctx, v); break;
    }
}

static void etm_AttributeType_print_json_enum(flatcc_json_printer_t *ctx, int32_t v)
{

    switch (v) {
    case (0): flatcc_json_printer_enum(ctx, "Float", 5); break;
    case (1): flatcc_json_printer_enum(ctx, "Int", 3); break;
    case (2): flatcc_json_printer_enum(ctx, "String", 6); break;
    case (3): flatcc_json_printer_enum(ctx, "Tensor", 6); break;
    case (4): flatcc_json_printer_enum(ctx, "Graph", 5); break;
    case (5): flatcc_json_printer_enum(ctx, "Floats", 6); break;
    case (6): flatcc_json_printer_enum(ctx, "Int64s", 6); break;
    case (7): flatcc_json_printer_enum(ctx, "Tensors", 7); break;
    case (8): flatcc_json_printer_enum(ctx, "Graphs", 6); break;
    default: flatcc_json_printer_int32(ctx, v); break;
    }
}

static void etm_NodeType_print_json_enum(flatcc_json_printer_t *ctx, int32_t v)
{

    switch (v) {
    case (0): flatcc_json_printer_enum(ctx, "Generic", 7); break;
    case (1): flatcc_json_printer_enum(ctx, "Input", 5); break;
    case (2): flatcc_json_printer_enum(ctx, "Output", 6); break;
    case (3): flatcc_json_printer_enum(ctx, "Hidden", 6); break;
    default: flatcc_json_printer_int32(ctx, v); break;
    }
}

static void etm_OpType_print_json_enum(flatcc_json_printer_t *ctx, int32_t v)
{

    switch (v) {
    case (0): flatcc_json_printer_enum(ctx, "Undefined", 9); break;
    case (1): flatcc_json_printer_enum(ctx, "Conv", 4); break;
    case (2): flatcc_json_printer_enum(ctx, "Pool", 4); break;
    default: flatcc_json_printer_int32(ctx, v); break;
    }
}

static void etm_GraphInfo_print_json_union_type(flatcc_json_printer_t *ctx, flatbuffers_utype_t type)
{
    switch (type) {
    case 1:
        flatcc_json_printer_enum(ctx, "PGraphInfo", 10);
        break;
    case 2:
        flatcc_json_printer_enum(ctx, "SGraphInfo", 10);
        break;
    default:
        flatcc_json_printer_enum(ctx, "NONE", 4);
        break;
    }
}

static void etm_GraphInfo_print_json_union(flatcc_json_printer_t *ctx, flatcc_json_printer_union_descriptor_t *ud)
{
    switch (ud->type) {
    case 1:
        flatcc_json_printer_union_table(ctx, ud, etm_PGraphInfo_print_json_table);
        break;
    case 2:
        flatcc_json_printer_union_table(ctx, ud, etm_SGraphInfo_print_json_table);
        break;
    default:
        break;
    }
}

static void etm_Tensor_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_enum_field(ctx, td, 0, "type", 4, INT32_C(0), etm_TensorType_print_json_enum);
    flatcc_json_printer_string_field(ctx, td, 1, "name", 4);
    flatcc_json_printer_int32_field(ctx, td, 2, "index", 5, INT32_C(0));
    flatcc_json_printer_int32_vector_field(ctx, td, 3, "dims", 4);
    flatcc_json_printer_uint8_vector_field(ctx, td, 4, "datas", 5);
    flatcc_json_printer_uint64_field(ctx, td, 5, "ndata", 5, UINT64_C(0));
    flatcc_json_printer_uint8_field(ctx, td, 6, "szElem", 6, UINT8_C(0));
    flatcc_json_printer_uint32_field(ctx, td, 7, "nElem", 5, UINT32_C(0));
    flatcc_json_printer_int16_field(ctx, td, 8, "pNode", 5, INT16_C(0));
    flatcc_json_printer_bool_field(ctx, td, 9, "isReshaped", 10, UINT8_C(0));
    flatcc_json_printer_bool_field(ctx, td, 10, "isConstant", 10, UINT8_C(0));
    flatcc_json_printer_bool_field(ctx, td, 11, "isInput", 7, UINT8_C(0));
    flatcc_json_printer_bool_field(ctx, td, 12, "isOutput", 8, UINT8_C(0));
    flatcc_json_printer_bool_field(ctx, td, 13, "isIallocated", 12, UINT8_C(0));
    flatcc_json_printer_uint16_field(ctx, td, 14, "layout", 6, UINT16_C(0));
}

static inline int etm_Tensor_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, etm_Tensor_print_json_table);
}

static void etm_Attribute_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_string_field(ctx, td, 0, "name", 4);
    flatcc_json_printer_int32_enum_field(ctx, td, 1, "type", 4, INT32_C(0), etm_AttributeType_print_json_enum);
    flatcc_json_printer_float_field(ctx, td, 2, "f", 1, 0.00000000f);
    flatcc_json_printer_int64_field(ctx, td, 3, "i", 1, INT64_C(0));
    flatcc_json_printer_string_field(ctx, td, 4, "s", 1);
    flatcc_json_printer_float_vector_field(ctx, td, 7, "fs", 2);
    flatcc_json_printer_int64_vector_field(ctx, td, 8, "is", 2);
}

static inline int etm_Attribute_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, etm_Attribute_print_json_table);
}

static void etm_Node_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_string_field(ctx, td, 0, "name", 4);
    flatcc_json_printer_uint16_field(ctx, td, 1, "index", 5, UINT16_C(0));
    flatcc_json_printer_int32_enum_field(ctx, td, 2, "type", 4, INT32_C(0), etm_NodeType_print_json_enum);
    flatcc_json_printer_table_vector_field(ctx, td, 7, "attrVec", 7, etm_Attribute_print_json_table);
}

static inline int etm_Node_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, etm_Node_print_json_table);
}

static void etm_PGraphInfo_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_table_vector_field(ctx, td, 0, "subVec", 6, etm_Graph_print_json_table);
    flatcc_json_printer_uint16_vector_field(ctx, td, 1, "inputInodesVec", 14);
    flatcc_json_printer_uint16_vector_field(ctx, td, 2, "outputInodesVec", 15);
    flatcc_json_printer_uint16_field(ctx, td, 3, "ninputNode", 10, UINT16_C(0));
    flatcc_json_printer_uint16_field(ctx, td, 4, "noutputNode", 11, UINT16_C(0));
}

static inline int etm_PGraphInfo_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, etm_PGraphInfo_print_json_table);
}

static void etm_SGraphInfo_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_field(ctx, td, 0, "idx", 3, INT32_C(0));
    flatcc_json_printer_uint16_vector_field(ctx, td, 1, "nodesVec", 8);
    flatcc_json_printer_uint16_vector_field(ctx, td, 2, "inputItensorsVec", 16);
    flatcc_json_printer_uint16_vector_field(ctx, td, 3, "outputItensorsVec", 17);
}

static inline int etm_SGraphInfo_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, etm_SGraphInfo_print_json_table);
}

static void etm_Graph_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_table_vector_field(ctx, td, 0, "tensors", 7, etm_Tensor_print_json_table);
    flatcc_json_printer_table_vector_field(ctx, td, 1, "nodes", 5, etm_Node_print_json_table);
    flatcc_json_printer_uint16_field(ctx, td, 2, "dataLayout", 10, UINT16_C(0));
    flatcc_json_printer_bool_field(ctx, td, 3, "isSub", 5, UINT8_C(0));
    flatcc_json_printer_union_field(ctx, td, 5, "more", 4, etm_GraphInfo_print_json_union_type, etm_GraphInfo_print_json_union);
}

static inline int etm_Graph_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, etm_Graph_print_json_table);
}

static void etm_Op_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_int32_enum_field(ctx, td, 0, "type", 4, INT32_C(0), etm_OpType_print_json_enum);
    flatcc_json_printer_string_field(ctx, td, 1, "name", 4);
    flatcc_json_printer_int32_vector_field(ctx, td, 2, "inputIndexes", 12);
    flatcc_json_printer_int32_vector_field(ctx, td, 3, "outputIndexs", 12);
}

static inline int etm_Op_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, etm_Op_print_json_table);
}

static void etm_Model_print_json_table(flatcc_json_printer_t *ctx, flatcc_json_printer_table_descriptor_t *td)
{
    flatcc_json_printer_string_field(ctx, td, 0, "name", 4);
    flatcc_json_printer_table_vector_field(ctx, td, 1, "oplists", 7, etm_Op_print_json_table);
    flatcc_json_printer_string_vector_field(ctx, td, 2, "tensorName", 10);
}

static inline int etm_Model_print_json_as_root(flatcc_json_printer_t *ctx, const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_json_printer_table_as_root(ctx, buf, bufsiz, fid, etm_Model_print_json_table);
}

static int etm_print_json(flatcc_json_printer_t *ctx, const char *buf, size_t bufsiz)
{
    flatcc_json_printer_t printer;

    if (ctx == 0) {
        ctx = &printer;
        flatcc_json_printer_init(ctx, 0);
    }
    return etm_Model_print_json_as_root(ctx, buf, bufsiz, 0);}

#include "flatcc/flatcc_epilogue.h"
#endif /* ETM_JSON_PRINTER_H */
