#ifndef ETM_READER_H
#define ETM_READER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif


typedef const struct etm_Tensor_table *etm_Tensor_table_t;
typedef struct etm_Tensor_table *etm_Tensor_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_Tensor_vec_t;
typedef flatbuffers_uoffset_t *etm_Tensor_mutable_vec_t;
typedef const struct etm_Attribute_table *etm_Attribute_table_t;
typedef struct etm_Attribute_table *etm_Attribute_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_Attribute_vec_t;
typedef flatbuffers_uoffset_t *etm_Attribute_mutable_vec_t;
typedef const struct etm_Node_table *etm_Node_table_t;
typedef struct etm_Node_table *etm_Node_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_Node_vec_t;
typedef flatbuffers_uoffset_t *etm_Node_mutable_vec_t;
typedef const struct etm_PGraphInfo_table *etm_PGraphInfo_table_t;
typedef struct etm_PGraphInfo_table *etm_PGraphInfo_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_PGraphInfo_vec_t;
typedef flatbuffers_uoffset_t *etm_PGraphInfo_mutable_vec_t;
typedef const struct etm_SGraphInfo_table *etm_SGraphInfo_table_t;
typedef struct etm_SGraphInfo_table *etm_SGraphInfo_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_SGraphInfo_vec_t;
typedef flatbuffers_uoffset_t *etm_SGraphInfo_mutable_vec_t;
typedef const struct etm_Graph_table *etm_Graph_table_t;
typedef struct etm_Graph_table *etm_Graph_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_Graph_vec_t;
typedef flatbuffers_uoffset_t *etm_Graph_mutable_vec_t;
typedef const struct etm_Op_table *etm_Op_table_t;
typedef struct etm_Op_table *etm_Op_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_Op_vec_t;
typedef flatbuffers_uoffset_t *etm_Op_mutable_vec_t;
typedef const struct etm_Model_table *etm_Model_table_t;
typedef struct etm_Model_table *etm_Model_mutable_table_t;
typedef const flatbuffers_uoffset_t *etm_Model_vec_t;
typedef flatbuffers_uoffset_t *etm_Model_mutable_vec_t;
#ifndef etm_Tensor_file_identifier
#define etm_Tensor_file_identifier 0
#endif
/* deprecated, use etm_Tensor_file_identifier */
#ifndef etm_Tensor_identifier
#define etm_Tensor_identifier 0
#endif
#define etm_Tensor_type_hash ((flatbuffers_thash_t)0x4bf3c3e)
#define etm_Tensor_type_identifier "\x3e\x3c\xbf\x04"
#ifndef etm_Tensor_file_extension
#define etm_Tensor_file_extension "bin"
#endif
#ifndef etm_Attribute_file_identifier
#define etm_Attribute_file_identifier 0
#endif
/* deprecated, use etm_Attribute_file_identifier */
#ifndef etm_Attribute_identifier
#define etm_Attribute_identifier 0
#endif
#define etm_Attribute_type_hash ((flatbuffers_thash_t)0x8d6eee2d)
#define etm_Attribute_type_identifier "\x2d\xee\x6e\x8d"
#ifndef etm_Attribute_file_extension
#define etm_Attribute_file_extension "bin"
#endif
#ifndef etm_Node_file_identifier
#define etm_Node_file_identifier 0
#endif
/* deprecated, use etm_Node_file_identifier */
#ifndef etm_Node_identifier
#define etm_Node_identifier 0
#endif
#define etm_Node_type_hash ((flatbuffers_thash_t)0x8a7a3df7)
#define etm_Node_type_identifier "\xf7\x3d\x7a\x8a"
#ifndef etm_Node_file_extension
#define etm_Node_file_extension "bin"
#endif
#ifndef etm_PGraphInfo_file_identifier
#define etm_PGraphInfo_file_identifier 0
#endif
/* deprecated, use etm_PGraphInfo_file_identifier */
#ifndef etm_PGraphInfo_identifier
#define etm_PGraphInfo_identifier 0
#endif
#define etm_PGraphInfo_type_hash ((flatbuffers_thash_t)0xf5d80ce3)
#define etm_PGraphInfo_type_identifier "\xe3\x0c\xd8\xf5"
#ifndef etm_PGraphInfo_file_extension
#define etm_PGraphInfo_file_extension "bin"
#endif
#ifndef etm_SGraphInfo_file_identifier
#define etm_SGraphInfo_file_identifier 0
#endif
/* deprecated, use etm_SGraphInfo_file_identifier */
#ifndef etm_SGraphInfo_identifier
#define etm_SGraphInfo_identifier 0
#endif
#define etm_SGraphInfo_type_hash ((flatbuffers_thash_t)0x3ff5391c)
#define etm_SGraphInfo_type_identifier "\x1c\x39\xf5\x3f"
#ifndef etm_SGraphInfo_file_extension
#define etm_SGraphInfo_file_extension "bin"
#endif
#ifndef etm_Graph_file_identifier
#define etm_Graph_file_identifier 0
#endif
/* deprecated, use etm_Graph_file_identifier */
#ifndef etm_Graph_identifier
#define etm_Graph_identifier 0
#endif
#define etm_Graph_type_hash ((flatbuffers_thash_t)0x62b6e685)
#define etm_Graph_type_identifier "\x85\xe6\xb6\x62"
#ifndef etm_Graph_file_extension
#define etm_Graph_file_extension "bin"
#endif
#ifndef etm_Op_file_identifier
#define etm_Op_file_identifier 0
#endif
/* deprecated, use etm_Op_file_identifier */
#ifndef etm_Op_identifier
#define etm_Op_identifier 0
#endif
#define etm_Op_type_hash ((flatbuffers_thash_t)0xf35e35e8)
#define etm_Op_type_identifier "\xe8\x35\x5e\xf3"
#ifndef etm_Op_file_extension
#define etm_Op_file_extension "bin"
#endif
#ifndef etm_Model_file_identifier
#define etm_Model_file_identifier 0
#endif
/* deprecated, use etm_Model_file_identifier */
#ifndef etm_Model_identifier
#define etm_Model_identifier 0
#endif
#define etm_Model_type_hash ((flatbuffers_thash_t)0xc59c70f4)
#define etm_Model_type_identifier "\xf4\x70\x9c\xc5"
#ifndef etm_Model_file_extension
#define etm_Model_file_extension "bin"
#endif

typedef int32_t etm_TensorType_enum_t;
__flatbuffers_define_integer_type(etm_TensorType, etm_TensorType_enum_t, 32)
#define etm_TensorType_Undefined ((etm_TensorType_enum_t)INT32_C(0))
#define etm_TensorType_Bool ((etm_TensorType_enum_t)INT32_C(9))
#define etm_TensorType_Int8 ((etm_TensorType_enum_t)INT32_C(3))
#define etm_TensorType_Int16 ((etm_TensorType_enum_t)INT32_C(5))
#define etm_TensorType_Int32 ((etm_TensorType_enum_t)INT32_C(6))
#define etm_TensorType_Int64 ((etm_TensorType_enum_t)INT32_C(7))
#define etm_TensorType_Uint8 ((etm_TensorType_enum_t)INT32_C(2))
#define etm_TensorType_Uint16 ((etm_TensorType_enum_t)INT32_C(4))
#define etm_TensorType_Uint32 ((etm_TensorType_enum_t)INT32_C(12))
#define etm_TensorType_Uint64 ((etm_TensorType_enum_t)INT32_C(13))
#define etm_TensorType_Bfloat16 ((etm_TensorType_enum_t)INT32_C(16))
#define etm_TensorType_Float16 ((etm_TensorType_enum_t)INT32_C(10))
#define etm_TensorType_Float32 ((etm_TensorType_enum_t)INT32_C(1))
#define etm_TensorType_Float64 ((etm_TensorType_enum_t)INT32_C(11))
#define etm_TensorType_Complex64 ((etm_TensorType_enum_t)INT32_C(14))
#define etm_TensorType_Complex128 ((etm_TensorType_enum_t)INT32_C(15))
#define etm_TensorType_String ((etm_TensorType_enum_t)INT32_C(8))

static inline const char *etm_TensorType_name(etm_TensorType_enum_t value)
{
    switch (value) {
    case etm_TensorType_Undefined: return "Undefined";
    case etm_TensorType_Bool: return "Bool";
    case etm_TensorType_Int8: return "Int8";
    case etm_TensorType_Int16: return "Int16";
    case etm_TensorType_Int32: return "Int32";
    case etm_TensorType_Int64: return "Int64";
    case etm_TensorType_Uint8: return "Uint8";
    case etm_TensorType_Uint16: return "Uint16";
    case etm_TensorType_Uint32: return "Uint32";
    case etm_TensorType_Uint64: return "Uint64";
    case etm_TensorType_Bfloat16: return "Bfloat16";
    case etm_TensorType_Float16: return "Float16";
    case etm_TensorType_Float32: return "Float32";
    case etm_TensorType_Float64: return "Float64";
    case etm_TensorType_Complex64: return "Complex64";
    case etm_TensorType_Complex128: return "Complex128";
    case etm_TensorType_String: return "String";
    default: return "";
    }
}

static inline int etm_TensorType_is_known_value(etm_TensorType_enum_t value)
{
    switch (value) {
    case etm_TensorType_Undefined: return 1;
    case etm_TensorType_Bool: return 1;
    case etm_TensorType_Int8: return 1;
    case etm_TensorType_Int16: return 1;
    case etm_TensorType_Int32: return 1;
    case etm_TensorType_Int64: return 1;
    case etm_TensorType_Uint8: return 1;
    case etm_TensorType_Uint16: return 1;
    case etm_TensorType_Uint32: return 1;
    case etm_TensorType_Uint64: return 1;
    case etm_TensorType_Bfloat16: return 1;
    case etm_TensorType_Float16: return 1;
    case etm_TensorType_Float32: return 1;
    case etm_TensorType_Float64: return 1;
    case etm_TensorType_Complex64: return 1;
    case etm_TensorType_Complex128: return 1;
    case etm_TensorType_String: return 1;
    default: return 0;
    }
}

typedef int32_t etm_AttributeType_enum_t;
__flatbuffers_define_integer_type(etm_AttributeType, etm_AttributeType_enum_t, 32)
#define etm_AttributeType_Float ((etm_AttributeType_enum_t)INT32_C(0))
#define etm_AttributeType_Int ((etm_AttributeType_enum_t)INT32_C(1))
#define etm_AttributeType_String ((etm_AttributeType_enum_t)INT32_C(2))
#define etm_AttributeType_Tensor ((etm_AttributeType_enum_t)INT32_C(3))
#define etm_AttributeType_Graph ((etm_AttributeType_enum_t)INT32_C(4))
#define etm_AttributeType_Floats ((etm_AttributeType_enum_t)INT32_C(5))
#define etm_AttributeType_Int64s ((etm_AttributeType_enum_t)INT32_C(6))
#define etm_AttributeType_Tensors ((etm_AttributeType_enum_t)INT32_C(7))
#define etm_AttributeType_Graphs ((etm_AttributeType_enum_t)INT32_C(8))

static inline const char *etm_AttributeType_name(etm_AttributeType_enum_t value)
{
    switch (value) {
    case etm_AttributeType_Float: return "Float";
    case etm_AttributeType_Int: return "Int";
    case etm_AttributeType_String: return "String";
    case etm_AttributeType_Tensor: return "Tensor";
    case etm_AttributeType_Graph: return "Graph";
    case etm_AttributeType_Floats: return "Floats";
    case etm_AttributeType_Int64s: return "Int64s";
    case etm_AttributeType_Tensors: return "Tensors";
    case etm_AttributeType_Graphs: return "Graphs";
    default: return "";
    }
}

static inline int etm_AttributeType_is_known_value(etm_AttributeType_enum_t value)
{
    switch (value) {
    case etm_AttributeType_Float: return 1;
    case etm_AttributeType_Int: return 1;
    case etm_AttributeType_String: return 1;
    case etm_AttributeType_Tensor: return 1;
    case etm_AttributeType_Graph: return 1;
    case etm_AttributeType_Floats: return 1;
    case etm_AttributeType_Int64s: return 1;
    case etm_AttributeType_Tensors: return 1;
    case etm_AttributeType_Graphs: return 1;
    default: return 0;
    }
}

typedef int32_t etm_NodeType_enum_t;
__flatbuffers_define_integer_type(etm_NodeType, etm_NodeType_enum_t, 32)
#define etm_NodeType_Generic ((etm_NodeType_enum_t)INT32_C(0))
#define etm_NodeType_Input ((etm_NodeType_enum_t)INT32_C(1))
#define etm_NodeType_Output ((etm_NodeType_enum_t)INT32_C(2))
#define etm_NodeType_Hidden ((etm_NodeType_enum_t)INT32_C(3))

static inline const char *etm_NodeType_name(etm_NodeType_enum_t value)
{
    switch (value) {
    case etm_NodeType_Generic: return "Generic";
    case etm_NodeType_Input: return "Input";
    case etm_NodeType_Output: return "Output";
    case etm_NodeType_Hidden: return "Hidden";
    default: return "";
    }
}

static inline int etm_NodeType_is_known_value(etm_NodeType_enum_t value)
{
    switch (value) {
    case etm_NodeType_Generic: return 1;
    case etm_NodeType_Input: return 1;
    case etm_NodeType_Output: return 1;
    case etm_NodeType_Hidden: return 1;
    default: return 0;
    }
}

typedef int32_t etm_OpType_enum_t;
__flatbuffers_define_integer_type(etm_OpType, etm_OpType_enum_t, 32)
#define etm_OpType_Undefined ((etm_OpType_enum_t)INT32_C(0))
#define etm_OpType_Conv ((etm_OpType_enum_t)INT32_C(1))
#define etm_OpType_Pool ((etm_OpType_enum_t)INT32_C(2))

static inline const char *etm_OpType_name(etm_OpType_enum_t value)
{
    switch (value) {
    case etm_OpType_Undefined: return "Undefined";
    case etm_OpType_Conv: return "Conv";
    case etm_OpType_Pool: return "Pool";
    default: return "";
    }
}

static inline int etm_OpType_is_known_value(etm_OpType_enum_t value)
{
    switch (value) {
    case etm_OpType_Undefined: return 1;
    case etm_OpType_Conv: return 1;
    case etm_OpType_Pool: return 1;
    default: return 0;
    }
}



struct etm_Tensor_table { uint8_t unused__; };

static inline size_t etm_Tensor_vec_len(etm_Tensor_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_Tensor_table_t etm_Tensor_vec_at(etm_Tensor_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_Tensor_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_Tensor)

__flatbuffers_define_scalar_field(0, etm_Tensor, type, etm_TensorType, etm_TensorType_enum_t, INT32_C(0))
__flatbuffers_define_string_field(1, etm_Tensor, name, 0)
__flatbuffers_define_scalar_field(2, etm_Tensor, index, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_vector_field(3, etm_Tensor, dims, flatbuffers_int32_vec_t, 0)
__flatbuffers_define_vector_field(4, etm_Tensor, datas, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_scalar_field(5, etm_Tensor, ndata, flatbuffers_uint64, uint64_t, UINT64_C(0))
__flatbuffers_define_scalar_field(6, etm_Tensor, szElem, flatbuffers_uint8, uint8_t, UINT8_C(0))
__flatbuffers_define_scalar_field(7, etm_Tensor, nElem, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(8, etm_Tensor, pNode, flatbuffers_int16, int16_t, INT16_C(0))
__flatbuffers_define_scalar_field(9, etm_Tensor, isReshaped, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(10, etm_Tensor, isConstant, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(11, etm_Tensor, isInput, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(12, etm_Tensor, isOutput, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(13, etm_Tensor, isIallocated, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_scalar_field(14, etm_Tensor, layout, flatbuffers_uint16, uint16_t, UINT16_C(0))

struct etm_Attribute_table { uint8_t unused__; };

static inline size_t etm_Attribute_vec_len(etm_Attribute_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_Attribute_table_t etm_Attribute_vec_at(etm_Attribute_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_Attribute_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_Attribute)

__flatbuffers_define_string_field(0, etm_Attribute, name, 0)
__flatbuffers_define_scalar_field(1, etm_Attribute, type, etm_AttributeType, etm_AttributeType_enum_t, INT32_C(0))
__flatbuffers_define_scalar_field(2, etm_Attribute, f, flatbuffers_float, float, 0.00000000f)
__flatbuffers_define_scalar_field(3, etm_Attribute, i, flatbuffers_int64, int64_t, INT64_C(0))
__flatbuffers_define_string_field(4, etm_Attribute, s, 0)
/* Skipping deprecated field: 'etm_Attribute_t' */

/* Skipping deprecated field: 'etm_Attribute_g' */

__flatbuffers_define_vector_field(7, etm_Attribute, fs, flatbuffers_float_vec_t, 0)
__flatbuffers_define_vector_field(8, etm_Attribute, is, flatbuffers_int64_vec_t, 0)
/* Skipping deprecated field: 'etm_Attribute_ts' */

/* Skipping deprecated field: 'etm_Attribute_gs' */


struct etm_Node_table { uint8_t unused__; };

static inline size_t etm_Node_vec_len(etm_Node_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_Node_table_t etm_Node_vec_at(etm_Node_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_Node_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_Node)

__flatbuffers_define_string_field(0, etm_Node, name, 0)
__flatbuffers_define_scalar_field(1, etm_Node, index, flatbuffers_uint16, uint16_t, UINT16_C(0))
__flatbuffers_define_scalar_field(2, etm_Node, type, etm_NodeType, etm_NodeType_enum_t, INT32_C(0))
/* Skipping deprecated field: 'etm_Node_in' */

/* Skipping deprecated field: 'etm_Node_out' */

/* Skipping deprecated field: 'etm_Node_op' */

/* Skipping deprecated field: 'etm_Node_graph' */

__flatbuffers_define_vector_field(7, etm_Node, attrVec, etm_Attribute_vec_t, 0)
typedef uint8_t etm_GraphInfo_union_type_t;
__flatbuffers_define_integer_type(etm_GraphInfo, etm_GraphInfo_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, etm_GraphInfo)
#define etm_GraphInfo_NONE ((etm_GraphInfo_union_type_t)UINT8_C(0))
#define etm_GraphInfo_PGraphInfo ((etm_GraphInfo_union_type_t)UINT8_C(1))
#define etm_GraphInfo_SGraphInfo ((etm_GraphInfo_union_type_t)UINT8_C(2))

static inline const char *etm_GraphInfo_type_name(etm_GraphInfo_union_type_t type)
{
    switch (type) {
    case etm_GraphInfo_NONE: return "NONE";
    case etm_GraphInfo_PGraphInfo: return "PGraphInfo";
    case etm_GraphInfo_SGraphInfo: return "SGraphInfo";
    default: return "";
    }
}

static inline int etm_GraphInfo_is_known_type(etm_GraphInfo_union_type_t type)
{
    switch (type) {
    case etm_GraphInfo_NONE: return 1;
    case etm_GraphInfo_PGraphInfo: return 1;
    case etm_GraphInfo_SGraphInfo: return 1;
    default: return 0;
    }
}


struct etm_PGraphInfo_table { uint8_t unused__; };

static inline size_t etm_PGraphInfo_vec_len(etm_PGraphInfo_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_PGraphInfo_table_t etm_PGraphInfo_vec_at(etm_PGraphInfo_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_PGraphInfo_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_PGraphInfo)

__flatbuffers_define_vector_field(0, etm_PGraphInfo, subVec, etm_Graph_vec_t, 0)
__flatbuffers_define_vector_field(1, etm_PGraphInfo, inputInodesVec, flatbuffers_uint16_vec_t, 0)
__flatbuffers_define_vector_field(2, etm_PGraphInfo, outputInodesVec, flatbuffers_uint16_vec_t, 0)
__flatbuffers_define_scalar_field(3, etm_PGraphInfo, ninputNode, flatbuffers_uint16, uint16_t, UINT16_C(0))
__flatbuffers_define_scalar_field(4, etm_PGraphInfo, noutputNode, flatbuffers_uint16, uint16_t, UINT16_C(0))

struct etm_SGraphInfo_table { uint8_t unused__; };

static inline size_t etm_SGraphInfo_vec_len(etm_SGraphInfo_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_SGraphInfo_table_t etm_SGraphInfo_vec_at(etm_SGraphInfo_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_SGraphInfo_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_SGraphInfo)

__flatbuffers_define_scalar_field(0, etm_SGraphInfo, idx, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_vector_field(1, etm_SGraphInfo, nodesVec, flatbuffers_uint16_vec_t, 0)
__flatbuffers_define_vector_field(2, etm_SGraphInfo, inputItensorsVec, flatbuffers_uint16_vec_t, 0)
__flatbuffers_define_vector_field(3, etm_SGraphInfo, outputItensorsVec, flatbuffers_uint16_vec_t, 0)
/* Skipping deprecated field: 'etm_SGraphInfo_pgraph' */


struct etm_Graph_table { uint8_t unused__; };

static inline size_t etm_Graph_vec_len(etm_Graph_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_Graph_table_t etm_Graph_vec_at(etm_Graph_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_Graph_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_Graph)

__flatbuffers_define_vector_field(0, etm_Graph, tensors, etm_Tensor_vec_t, 0)
__flatbuffers_define_vector_field(1, etm_Graph, nodes, etm_Node_vec_t, 0)
__flatbuffers_define_scalar_field(2, etm_Graph, dataLayout, flatbuffers_uint16, uint16_t, UINT16_C(0))
__flatbuffers_define_scalar_field(3, etm_Graph, isSub, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))
__flatbuffers_define_union_field(flatbuffers_, 5, etm_Graph, more, etm_GraphInfo, 0)

struct etm_Op_table { uint8_t unused__; };

static inline size_t etm_Op_vec_len(etm_Op_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_Op_table_t etm_Op_vec_at(etm_Op_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_Op_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_Op)

__flatbuffers_define_scalar_field(0, etm_Op, type, etm_OpType, etm_OpType_enum_t, INT32_C(0))
__flatbuffers_define_string_field(1, etm_Op, name, 0)
__flatbuffers_define_vector_field(2, etm_Op, inputIndexes, flatbuffers_int32_vec_t, 0)
__flatbuffers_define_vector_field(3, etm_Op, outputIndexs, flatbuffers_int32_vec_t, 0)

struct etm_Model_table { uint8_t unused__; };

static inline size_t etm_Model_vec_len(etm_Model_vec_t vec)
__flatbuffers_vec_len(vec)
static inline etm_Model_table_t etm_Model_vec_at(etm_Model_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(etm_Model_table_t, vec, i, 0)
__flatbuffers_table_as_root(etm_Model)

__flatbuffers_define_string_field(0, etm_Model, name, 0)
__flatbuffers_define_vector_field(1, etm_Model, oplists, etm_Op_vec_t, 0)
__flatbuffers_define_vector_field(2, etm_Model, tensorName, flatbuffers_string_vec_t, 0)


#include "flatcc/flatcc_epilogue.h"
#endif /* ETM_READER_H */
