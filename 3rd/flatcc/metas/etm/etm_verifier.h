#ifndef ETM_VERIFIER_H
#define ETM_VERIFIER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef ETM_READER_H
#include "etm_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#include "flatcc/flatcc_prologue.h"

static int etm_Tensor_verify_table(flatcc_table_verifier_descriptor_t *td);
static int etm_Attribute_verify_table(flatcc_table_verifier_descriptor_t *td);
static int etm_Node_verify_table(flatcc_table_verifier_descriptor_t *td);
static int etm_Graph_verify_table(flatcc_table_verifier_descriptor_t *td);
static int etm_Model_verify_table(flatcc_table_verifier_descriptor_t *td);

static int etm_Tensor_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* type */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 2, 0, 4, 4, INT64_C(1073741823)) /* dims */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 3, 0, 1, 1, INT64_C(4294967295)) /* datas */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 8, 8) /* ndata */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 4, 4) /* nElem */)) return ret;
    if ((ret = flatcc_verify_field(td, 6, 1, 1) /* isParam */)) return ret;
    if ((ret = flatcc_verify_field(td, 7, 2, 2) /* layout */)) return ret;
    return flatcc_verify_ok;
}

static inline int etm_Tensor_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, etm_Tensor_identifier, &etm_Tensor_verify_table);
}

static inline int etm_Tensor_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, etm_Tensor_identifier, &etm_Tensor_verify_table);
}

static inline int etm_Tensor_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, etm_Tensor_type_identifier, &etm_Tensor_verify_table);
}

static inline int etm_Tensor_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, etm_Tensor_type_identifier, &etm_Tensor_verify_table);
}

static inline int etm_Tensor_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &etm_Tensor_verify_table);
}

static inline int etm_Tensor_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &etm_Tensor_verify_table);
}

static inline int etm_Tensor_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &etm_Tensor_verify_table);
}

static inline int etm_Tensor_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &etm_Tensor_verify_table);
}

static int etm_Attribute_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* type */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* f */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 8, 8) /* i */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 4, 0) /* s */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 7, 0, 4, 4, INT64_C(1073741823)) /* fs */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 8, 0, 8, 8, INT64_C(536870911)) /* is */)) return ret;
    return flatcc_verify_ok;
}

static inline int etm_Attribute_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, etm_Attribute_identifier, &etm_Attribute_verify_table);
}

static inline int etm_Attribute_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, etm_Attribute_identifier, &etm_Attribute_verify_table);
}

static inline int etm_Attribute_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, etm_Attribute_type_identifier, &etm_Attribute_verify_table);
}

static inline int etm_Attribute_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, etm_Attribute_type_identifier, &etm_Attribute_verify_table);
}

static inline int etm_Attribute_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &etm_Attribute_verify_table);
}

static inline int etm_Attribute_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &etm_Attribute_verify_table);
}

static inline int etm_Attribute_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &etm_Attribute_verify_table);
}

static inline int etm_Attribute_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &etm_Attribute_verify_table);
}

static int etm_Node_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* type */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 5, 0, &etm_Attribute_verify_table) /* attrVec */)) return ret;
    return flatcc_verify_ok;
}

static inline int etm_Node_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, etm_Node_identifier, &etm_Node_verify_table);
}

static inline int etm_Node_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, etm_Node_identifier, &etm_Node_verify_table);
}

static inline int etm_Node_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, etm_Node_type_identifier, &etm_Node_verify_table);
}

static inline int etm_Node_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, etm_Node_type_identifier, &etm_Node_verify_table);
}

static inline int etm_Node_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &etm_Node_verify_table);
}

static inline int etm_Node_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &etm_Node_verify_table);
}

static inline int etm_Node_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &etm_Node_verify_table);
}

static inline int etm_Node_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &etm_Node_verify_table);
}

static int etm_Graph_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_table_vector_field(td, 0, 0, &etm_Tensor_verify_table) /* tensors */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &etm_Node_verify_table) /* nodes */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 2, 2) /* dataLayout */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 3, 0, 2, 2, INT64_C(2147483647)) /* nodesVec */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 4, 0, 2, 2, INT64_C(2147483647)) /* inputItensorsVec */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 5, 0, 2, 2, INT64_C(2147483647)) /* outputItensorsVec */)) return ret;
    return flatcc_verify_ok;
}

static inline int etm_Graph_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, etm_Graph_identifier, &etm_Graph_verify_table);
}

static inline int etm_Graph_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, etm_Graph_identifier, &etm_Graph_verify_table);
}

static inline int etm_Graph_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, etm_Graph_type_identifier, &etm_Graph_verify_table);
}

static inline int etm_Graph_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, etm_Graph_type_identifier, &etm_Graph_verify_table);
}

static inline int etm_Graph_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &etm_Graph_verify_table);
}

static inline int etm_Graph_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &etm_Graph_verify_table);
}

static inline int etm_Graph_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &etm_Graph_verify_table);
}

static inline int etm_Graph_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &etm_Graph_verify_table);
}

static int etm_Model_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &etm_Graph_verify_table) /* graphVec */)) return ret;
    return flatcc_verify_ok;
}

static inline int etm_Model_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, etm_Model_identifier, &etm_Model_verify_table);
}

static inline int etm_Model_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, etm_Model_identifier, &etm_Model_verify_table);
}

static inline int etm_Model_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, etm_Model_type_identifier, &etm_Model_verify_table);
}

static inline int etm_Model_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, etm_Model_type_identifier, &etm_Model_verify_table);
}

static inline int etm_Model_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &etm_Model_verify_table);
}

static inline int etm_Model_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &etm_Model_verify_table);
}

static inline int etm_Model_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &etm_Model_verify_table);
}

static inline int etm_Model_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &etm_Model_verify_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* ETM_VERIFIER_H */
